{
	"info": {
		"_postman_id": "757ed83f-ef6d-4c49-a7a0-7d6dc83c5ecf",
		"name": "test",
		"description": "API Specification for Google Maps Platform",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "25255214-757ed83f-ef6d-4c49-a7a0-7d6dc83c5ecf"
	},
	"item": [
		{
			"name": "geolocation",
			"item": [
				{
					"name": "v1",
					"item": [
						{
							"name": "geolocate",
							"item": [
								{
									"name": "Geolocation API returns a location and accuracy radius based on information about cell towers and WiFi nodes that the mobile client can detect. This document describes the protocol used to send this data to the server and to return a response to the clien",
									"id": "d8b4d730-1795-491b-a145-f5e63203bcd1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"homeMobileCountryCode\": \"<integer>\",\n  \"homeMobileNetworkCode\": \"<integer>\",\n  \"radioType\": \"<string>\",\n  \"carrier\": \"<string>\",\n  \"considerIp\": \"<string>\",\n  \"cellTowers\": [\n    {\n      \"cellId\": \"<integer>\",\n      \"locationAreaCode\": \"<integer>\",\n      \"mobileCountryCode\": \"<integer>\",\n      \"mobileNetworkCode\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"signalStrength\": \"<number>\",\n      \"timingAdvance\": \"<number>\"\n    },\n    {\n      \"cellId\": \"<integer>\",\n      \"locationAreaCode\": \"<integer>\",\n      \"mobileCountryCode\": \"<integer>\",\n      \"mobileNetworkCode\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"signalStrength\": \"<number>\",\n      \"timingAdvance\": \"<number>\"\n    }\n  ],\n  \"wifiAccessPoints\": [\n    {\n      \"macAddress\": \"<string>\",\n      \"signalStrength\": \"<integer>\",\n      \"signalToNoiseRatio\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"channel\": \"<integer>\"\n    },\n    {\n      \"macAddress\": \"<string>\",\n      \"signalStrength\": \"<integer>\",\n      \"signalToNoiseRatio\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"channel\": \"<integer>\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://www.googleapis.com/geolocation/v1/geolocate",
											"protocol": "https",
											"host": [
												"www",
												"googleapis",
												"com"
											],
											"path": [
												"geolocation",
												"v1",
												"geolocate"
											]
										},
										"description": "Geolocation API returns a location and accuracy radius based on information about cell towers and WiFi nodes that the mobile client can detect. This document describes the protocol used to send this data to the server and to return a response to the client.\n\nCommunication is done over HTTPS using POST. Both request and response are formatted as JSON, and the content type of both is `application/json`.\n\nYou must specify a key in your request, included as the value of a`key` parameter. A `key` is your application's  API key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.google.com/maps/documentation/geolocation/get-api-key)."
									},
									"response": [
										{
											"id": "62142d8e-1db0-4209-b7ea-b1df72415a4e",
											"name": "200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"homeMobileCountryCode\": \"<integer>\",\n  \"homeMobileNetworkCode\": \"<integer>\",\n  \"radioType\": \"<string>\",\n  \"carrier\": \"<string>\",\n  \"considerIp\": \"<string>\",\n  \"cellTowers\": [\n    {\n      \"cellId\": \"<integer>\",\n      \"locationAreaCode\": \"<integer>\",\n      \"mobileCountryCode\": \"<integer>\",\n      \"mobileNetworkCode\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"signalStrength\": \"<number>\",\n      \"timingAdvance\": \"<number>\"\n    },\n    {\n      \"cellId\": \"<integer>\",\n      \"locationAreaCode\": \"<integer>\",\n      \"mobileCountryCode\": \"<integer>\",\n      \"mobileNetworkCode\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"signalStrength\": \"<number>\",\n      \"timingAdvance\": \"<number>\"\n    }\n  ],\n  \"wifiAccessPoints\": [\n    {\n      \"macAddress\": \"<string>\",\n      \"signalStrength\": \"<integer>\",\n      \"signalToNoiseRatio\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"channel\": \"<integer>\"\n    },\n    {\n      \"macAddress\": \"<string>\",\n      \"signalStrength\": \"<integer>\",\n      \"signalToNoiseRatio\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"channel\": \"<integer>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://www.googleapis.com/geolocation/v1/geolocate?key=<API Key>",
													"protocol": "https",
													"host": [
														"www",
														"googleapis",
														"com"
													],
													"path": [
														"geolocation",
														"v1",
														"geolocate"
													],
													"query": [
														{
															"description": "Added as a part of security scheme: apikey",
															"key": "key",
															"value": "<API Key>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"location\": {\n    \"lat\": \"<number>\",\n    \"lng\": \"<number>\"\n  },\n  \"accuracy\": \"<number>\"\n}"
										},
										{
											"id": "a670600e-1e69-4e7b-9a70-0890ad54f467",
											"name": "400 BAD REQUEST",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"homeMobileCountryCode\": \"<integer>\",\n  \"homeMobileNetworkCode\": \"<integer>\",\n  \"radioType\": \"<string>\",\n  \"carrier\": \"<string>\",\n  \"considerIp\": \"<string>\",\n  \"cellTowers\": [\n    {\n      \"cellId\": \"<integer>\",\n      \"locationAreaCode\": \"<integer>\",\n      \"mobileCountryCode\": \"<integer>\",\n      \"mobileNetworkCode\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"signalStrength\": \"<number>\",\n      \"timingAdvance\": \"<number>\"\n    },\n    {\n      \"cellId\": \"<integer>\",\n      \"locationAreaCode\": \"<integer>\",\n      \"mobileCountryCode\": \"<integer>\",\n      \"mobileNetworkCode\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"signalStrength\": \"<number>\",\n      \"timingAdvance\": \"<number>\"\n    }\n  ],\n  \"wifiAccessPoints\": [\n    {\n      \"macAddress\": \"<string>\",\n      \"signalStrength\": \"<integer>\",\n      \"signalToNoiseRatio\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"channel\": \"<integer>\"\n    },\n    {\n      \"macAddress\": \"<string>\",\n      \"signalStrength\": \"<integer>\",\n      \"signalToNoiseRatio\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"channel\": \"<integer>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://www.googleapis.com/geolocation/v1/geolocate?key=<API Key>",
													"protocol": "https",
													"host": [
														"www",
														"googleapis",
														"com"
													],
													"path": [
														"geolocation",
														"v1",
														"geolocate"
													],
													"query": [
														{
															"description": "Added as a part of security scheme: apikey",
															"key": "key",
															"value": "<API Key>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": {\n    \"code\": \"<number>\",\n    \"message\": \"<string>\",\n    \"errors\": [\n      {\n        \"@type\": \"<string>\",\n        \"message\": \"<string>\",\n        \"reason\": \"<string>\",\n        \"domain\": \"<string>\",\n        \"metadata\": {},\n        \"fieldViolations\": [\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          },\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"@type\": \"<string>\",\n        \"message\": \"<string>\",\n        \"reason\": \"<string>\",\n        \"domain\": \"<string>\",\n        \"metadata\": {},\n        \"fieldViolations\": [\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          },\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          }\n        ]\n      }\n    ],\n    \"status\": \"<string>\",\n    \"details\": [\n      {\n        \"@type\": \"<string>\",\n        \"message\": \"<string>\",\n        \"reason\": \"<string>\",\n        \"domain\": \"<string>\",\n        \"metadata\": {},\n        \"fieldViolations\": [\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          },\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"@type\": \"<string>\",\n        \"message\": \"<string>\",\n        \"reason\": \"<string>\",\n        \"domain\": \"<string>\",\n        \"metadata\": {},\n        \"fieldViolations\": [\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          },\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          }\n        ]\n      }\n    ]\n  }\n}"
										},
										{
											"id": "6c74a8e1-8346-4860-a010-581e5c26e0f9",
											"name": "404 NOT FOUND",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"homeMobileCountryCode\": \"<integer>\",\n  \"homeMobileNetworkCode\": \"<integer>\",\n  \"radioType\": \"<string>\",\n  \"carrier\": \"<string>\",\n  \"considerIp\": \"<string>\",\n  \"cellTowers\": [\n    {\n      \"cellId\": \"<integer>\",\n      \"locationAreaCode\": \"<integer>\",\n      \"mobileCountryCode\": \"<integer>\",\n      \"mobileNetworkCode\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"signalStrength\": \"<number>\",\n      \"timingAdvance\": \"<number>\"\n    },\n    {\n      \"cellId\": \"<integer>\",\n      \"locationAreaCode\": \"<integer>\",\n      \"mobileCountryCode\": \"<integer>\",\n      \"mobileNetworkCode\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"signalStrength\": \"<number>\",\n      \"timingAdvance\": \"<number>\"\n    }\n  ],\n  \"wifiAccessPoints\": [\n    {\n      \"macAddress\": \"<string>\",\n      \"signalStrength\": \"<integer>\",\n      \"signalToNoiseRatio\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"channel\": \"<integer>\"\n    },\n    {\n      \"macAddress\": \"<string>\",\n      \"signalStrength\": \"<integer>\",\n      \"signalToNoiseRatio\": \"<integer>\",\n      \"age\": \"<integer>\",\n      \"channel\": \"<integer>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://www.googleapis.com/geolocation/v1/geolocate?key=<API Key>",
													"protocol": "https",
													"host": [
														"www",
														"googleapis",
														"com"
													],
													"path": [
														"geolocation",
														"v1",
														"geolocate"
													],
													"query": [
														{
															"description": "Added as a part of security scheme: apikey",
															"key": "key",
															"value": "<API Key>"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": {\n    \"code\": \"<number>\",\n    \"message\": \"<string>\",\n    \"errors\": [\n      {\n        \"@type\": \"<string>\",\n        \"message\": \"<string>\",\n        \"reason\": \"<string>\",\n        \"domain\": \"<string>\",\n        \"metadata\": {},\n        \"fieldViolations\": [\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          },\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"@type\": \"<string>\",\n        \"message\": \"<string>\",\n        \"reason\": \"<string>\",\n        \"domain\": \"<string>\",\n        \"metadata\": {},\n        \"fieldViolations\": [\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          },\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          }\n        ]\n      }\n    ],\n    \"status\": \"<string>\",\n    \"details\": [\n      {\n        \"@type\": \"<string>\",\n        \"message\": \"<string>\",\n        \"reason\": \"<string>\",\n        \"domain\": \"<string>\",\n        \"metadata\": {},\n        \"fieldViolations\": [\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          },\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"@type\": \"<string>\",\n        \"message\": \"<string>\",\n        \"reason\": \"<string>\",\n        \"domain\": \"<string>\",\n        \"metadata\": {},\n        \"fieldViolations\": [\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          },\n          {\n            \"field\": \"<string>\",\n            \"description\": \"<string>\"\n          }\n        ]\n      }\n    ]\n  }\n}"
										}
									]
								}
							],
							"id": "8911abb7-dedb-495b-8974-9f1b3376abfc"
						}
					],
					"id": "34cf4a3d-c3ce-40f5-8e1e-90e264253f23"
				}
			],
			"id": "76603d29-a9e4-4547-845f-f02d634f1151"
		},
		{
			"name": "maps",
			"item": [
				{
					"name": "api",
					"item": [
						{
							"name": "directions",
							"item": [
								{
									"name": "json",
									"item": [
										{
											"name": "The Directions API is a web service that uses an HTTP request to return JSON or XML-formatted directions between locations. You can receive directions for several modes of transportation, such as transit, driving, walking, or cycling.",
											"id": "92a6bc74-a1cb-4a08-ac67-3c14e748a00c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://maps.googleapis.com/maps/api/directions/json?arrival_time=<number>&departure_time=<number>&alternatives=<boolean>&avoid=<string>&destination=<string>&origin=<string>&units=metric&waypoints=<string>&language=en&mode=walking&region=en&traffic_model=best_guess&transit_mode=<string>&transit_routing_preference=fewer_transfers",
													"protocol": "https",
													"host": [
														"maps",
														"googleapis",
														"com"
													],
													"path": [
														"maps",
														"api",
														"directions",
														"json"
													],
													"query": [
														{
															"description": "Specifies the desired time of arrival for transit directions, in seconds since midnight, January 1, 1970 UTC. You can specify either `departure_time` or `arrival_time`, but not both. Note that `arrival_time` must be specified as an integer.\n",
															"key": "arrival_time",
															"value": "<number>"
														},
														{
															"description": "Specifies the desired time of departure. You can specify the time as an integer in seconds since midnight, January 1, 1970 UTC. If a `departure_time` later than 9999-12-31T23:59:59.999999999Z is specified, the API will fall back the `departure_time` to 9999-12-31T23:59:59.999999999Z. Alternatively, you can specify a value of now, which sets the departure time to the current time (correct to the nearest second). The departure time may be specified in two cases:\n* For requests where the travel mode is transit: You can optionally specify one of `departure_time` or `arrival_time`. If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time).\n* For requests where the travel mode is driving: You can specify the `departure_time` to receive a route and trip duration (response field: duration_in_traffic) that take traffic conditions into account. The `departure_time` must be set to the current time or some time in the future. It cannot be in the past.\n\n<div class=\"note\">Note: If departure time is not specified, choice of route and duration are based on road network and average time-independent traffic conditions. Results for a given request may vary over time due to changes in the road network, updated average traffic conditions, and the distributed nature of the service. Results may also vary between nearly-equivalent routes at any time or frequency.</div>\n<div class=\"note\">Note: Distance Matrix requests specifying `departure_time` when `mode=driving` are limited to a maximum of 100 elements per request. The number of origins times the number of destinations defines the number of elements.</div>\n",
															"key": "departure_time",
															"value": "<number>"
														},
														{
															"description": "If set to `true`, specifies that the Directions service may provide more than one route alternative in the response. Note that providing route alternatives may increase the response time from the server. This is only available for requests without intermediate waypoints. For more information, see the [guide to waypoints](https://developers.google.com/maps/documentation/directions/get-directions#Waypoints).\n",
															"key": "alternatives",
															"value": "<boolean>"
														},
														{
															"description": "Indicates that the calculated route(s) should avoid the indicated features. This parameter supports the following arguments:\n* `tolls` indicates that the calculated route should avoid toll roads/bridges.\n* `highways` indicates that the calculated route should avoid highways.\n* `ferries` indicates that the calculated route should avoid ferries.\n* `indoor` indicates that the calculated route should avoid indoor steps for walking and transit directions.\n\nIt's possible to request a route that avoids any combination of tolls, highways and ferries by passing multiple restrictions to the avoid parameter. For example: \n\n```\navoid=tolls|highways|ferries.\n```\n",
															"key": "avoid",
															"value": "<string>"
														},
														{
															"description": "(Required) The place ID, address, or textual latitude/longitude value to which you wish to calculate directions. The options for the destination parameter are the same as for the origin parameter.",
															"key": "destination",
															"value": "<string>"
														},
														{
															"description": "(Required) The place ID, address, or textual latitude/longitude value from which you wish to calculate directions.\n* Place IDs must be prefixed with `place_id:`. You can retrieve place IDs from the Geocoding API and the Places API (including Place Autocomplete). For an example using place IDs from Place Autocomplete, see [Place Autocomplete and Directions](https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-directions). For more about place IDs, see the [Place ID overview](https://developers.google.com/maps/documentation/places/web-service/place-id).\n  \n  ```\n  origin=place_id:ChIJ3S-JXmauEmsRUcIaWtf4MzE\n  ```\n  \n* If you pass an address, the Directions service geocodes the string and converts it to a latitude/longitude coordinate to calculate directions. This coordinate may be different from that returned by the Geocoding API, for example a building entrance rather than its center.\n  \n  ```\n  origin=24+Sussex+Drive+Ottawa+ON\n  ```\n  \n  Using place IDs is preferred over using addresses or latitude/longitude coordinates. Using coordinates will always result in the point being snapped to the road nearest to those coordinates - which may not be an access point to the property, or even a road that will quickly or safely lead to the destination.\n* If you pass coordinates, the point will snap to the nearest road. Passing a place ID is preferred. If you do pass coordinates, ensure that no space exists between the latitude and longitude values.\n  \n  ```\n  origin=41.43206,-81.38992\n  ```\n\n* Plus codes must be formatted as a global code or a compound code. Format plus codes as shown here (plus signs are url-escaped to `%2B` and spaces are url-escaped to `%20`). \n  \n  * **Global code** is a 4 character area code and 6 character or longer local code (849VCWC8+R9 is `849VCWC8%2BR9`). \n  * **Compound code** is a 6 character or longer local code with an explicit location (CWC8+R9 Mountain View, CA, USA is `CWC8%2BR9%20Mountain%20View%20CA%20USA`).\n\n<div class=\"note\">Note: For efficiency and accuracy, use place ID's when possible. These ID's are uniquely explicit like a lat/lng value pair and provide geocoding benefits for routing such as access points and traffic variables. Unlike an address, ID's do not require the service to perform a search or an intermediate request for place details; therefore, performance is better.</div>\n",
															"key": "origin",
															"value": "<string>"
														},
														{
															"description": "Specifies the unit system to use when displaying results.\n\nDirections results contain text within distance fields that may be displayed to the user to indicate the distance of a particular \"step\" of the route. By default, this text uses the unit system of the origin's country or region.\n\nFor example, a route from \"Chicago, IL\" to \"Toronto, ONT\" will display results in miles, while the reverse route will display results in kilometers. You may override this unit system by setting one explicitly within the request's units parameter, passing one of the following values:\n\n* `metric` specifies usage of the metric system. Textual distances are returned using kilometers and meters.\n* `imperial` specifies usage of the Imperial (English) system. Textual distances are returned using miles and feet.\n\n<div class=\"note\">Note: this unit system setting only affects the text displayed within distance fields. The distance fields also contain values which are always expressed in meters.</div>\n",
															"key": "units",
															"value": "metric"
														},
														{
															"description": "<div class=\"caution\">Caution: Requests using more than 10 waypoints (between 11 and 25), or waypoint optimization, are billed at a higher rate. <a href=\"https://developers.google.com/maps/billing-and-pricing/pricing#directions-advanced\">Learn more about billing</a> for Google Maps Platform products.</div>\n\nSpecifies an array of intermediate locations to include along the route between the origin and destination points as pass through or stopover locations. Waypoints alter a route by directing it through the specified location(s). The API supports waypoints for these travel modes: driving, walking and bicycling; not transit.   You can supply one or more locations separated by the pipe character (`|` or `%7C`), in the form of a place ID, an address, or latitude/longitude coordinates. By default, the Directions service calculates a route using the waypoints in the order they are given. The precedence for parsing the value of the waypoint is place ID, latitude/longitude coordinates, then address.\n* If you pass a place ID, you must prefix it with `place_id:`. You can retrieve place IDs from the Geocoding API and the Places API (including Place Autocomplete). For an example using place IDs from Place Autocomplete, see [Place Autocomplete and Directions](/maps/documentation/javascript/examples/places-autocomplete-directions). For more about place IDs, see the [Place ID overview](/maps/documentation/places/web-service/place-id).\n  <div class=\"note\">For efficiency and accuracy, use place ID's when possible. These ID's are uniquely explicit like a lat/lng value pair and provide geocoding benefits for routing such as access points and traffic variables. Unlike an address, ID's do not require the service to perform a search or an intermediate request for place details; therefore, performance is better.</div>\n* If you pass latitude/longitude coordinates, the values go directly to the front-end server to calculate directions without geocoding. The points are snapped to roads and might not provide the accuracy your app needs. Use coordinates when you are confident the values truly specify the points your app needs for routing without regard to possible access points or additional geocoding details. Ensure that a comma (`%2C`) and not a space (`%20`) separates the latitude and longitude values.\n* If you pass an address, the Directions service will geocode the string and convert it into latitude/longitude coordinates to calculate directions. If the address value is ambiguous, the value might evoke a search to disambiguate from similar addresses. For example, \"1st Street\" could be a complete value or a partial value for \"1st street NE\" or \"1st St SE\". This result may be different from that returned by the Geocoding API. You can avoid possible misinterpretations using place IDs.\n* Alternatively, you can supply an encoded set of points using the [Encoded Polyline Algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm). You will find an encoded set is useful for a large number of waypoints, because the URL is significantly shorter. All web services have a URL limit of 8192 characters.\n  * Encoded polylines must be prefixed with `enc:` and followed by a colon (`:`). For example: `waypoints=enc:gfo}EtohhU:`.\n  * You can also include multiple encoded polylines, separated by the pipe character (`|`). For example, `waypoints=via:enc:wc~oAwquwMdlTxiKtqLyiK:|enc:c~vnAamswMvlTor@tjGi}L:| via:enc:udymA{~bxM:`\n\n##### Influence routes with stopover and pass through points\n\nFor each waypoint in the request, the directions response appends an entry to the `legs` array to provide the details for stopovers on that leg of the journey.\n\nIf you'd like to influence the route using waypoints without adding a stopover, add the prefix `via:` to the waypoint. Waypoints prefixed with `via:` will not add an entry to the `legs` array, but will route the journey through the waypoint.\n\nThe following URL modifies the previous request such that the journey is routed through Lexington without stopping:\n\n```\nhttps://maps.googleapis.com/maps/api/directions/json?\norigin=Boston,MA&destination=Concord,MA\n&waypoints=Charlestown,MA|via:Lexington,MA  \n```\n\nThe `via:` prefix is most effective when creating routes in response to the user dragging the waypoints on the map. Doing so allows the user to see how the final route may look in real-time and helps ensure that waypoints are placed in locations that are accessible to the Directions API.\n\n<div class=\"caution\">Caution: Using the `via:` prefix to avoid stopovers results in directions that are strict in their interpretation of the waypoint. This interpretation may result in severe detours on the route or `ZERO_RESULTS` in the response status code if the Directions API is unable to create directions through that point.</div>\n\n\n##### Optimize your waypoints\n\nBy default, the Directions service calculates a route through the provided waypoints in their given order. Optionally, you may pass `optimize:true` as the first argument within the waypoints parameter to allow the Directions service to optimize the provided route by rearranging the waypoints in a more efficient order. (This optimization is an application of the traveling salesperson problem.) Travel time is the primary factor which is optimized, but other factors such as distance, number of turns and many more may be taken into account when deciding which route is the most efficient. All waypoints must be stopovers for the Directions service to optimize their route.\n\nIf you instruct the Directions service to optimize the order of its waypoints, their order will be returned in the `waypoint_order` field within the routes object. The `waypoint_order` field returns values which are zero-based.\n\nThe following example calculates a road journey from Adelaide, South Australia to each of South Australia's main wine regions using route optimization.\n\n```\nhttps://maps.googleapis.com/maps/api/directions/json?\norigin=Adelaide,SA&destination=Adelaide,SA\n&waypoints=optimize:true|Barossa+Valley,SA|Clare,SA|Connawarra,SA|McLaren+Vale,SA\n```\n\nInspection of the calculated route will indicate that calculation uses waypoints in the following waypoint order:\n\n```\n\"waypoint_order\": [ 3, 2, 0, 1 ]\n```\n\n<div class=\"caution\">Caution: Requests using waypoint optimization are billed at a higher rate. <a href=\"https://developers.google.com/maps/billing-and-pricing/pricing#directions-advanced\">Learn more about how Google Maps Platform products are billed.</a></div>\n",
															"key": "waypoints",
															"value": "<string>"
														},
														{
															"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
															"key": "language",
															"value": "en"
														},
														{
															"description": "For the calculation of distances and directions, you may specify the transportation mode to use. By default, `DRIVING` mode is used. By default, directions are calculated as driving directions. The following travel modes are supported:\n\n* `driving` (default) indicates standard driving directions or distance using the road network.\n* `walking` requests walking directions or distance via pedestrian paths & sidewalks (where available).\n* `bicycling` requests bicycling directions or distance via bicycle paths & preferred streets (where available).\n* `transit` requests directions or distance via public transit routes (where available). If you set the mode to transit, you can optionally specify either a `departure_time` or an `arrival_time`. If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time). You can also optionally include a `transit_mode` and/or a `transit_routing_preference`.\n\n<div class=\"note\">Note: Both walking and bicycling directions may sometimes not include clear pedestrian or bicycling paths, so these directions will return warnings in the returned result which you must display to the user.</div>\n",
															"key": "mode",
															"value": "walking"
														},
														{
															"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
															"key": "region",
															"value": "en"
														},
														{
															"description": "Specifies the assumptions to use when calculating time in traffic. This setting affects the value returned in the duration_in_traffic field in the response, which contains the predicted time in traffic based on historical averages. The `traffic_model` parameter may only be specified for driving directions where the request includes a `departure_time`. The available values for this parameter are:\n* `best_guess` (default) indicates that the returned duration_in_traffic should be the best estimate of travel time given what is known about both historical traffic conditions and live traffic. Live traffic becomes more important the closer the `departure_time` is to now.\n* `pessimistic` indicates that the returned duration_in_traffic should be longer than the actual travel time on most days, though occasional days with particularly bad traffic conditions may exceed this value.\n* `optimistic` indicates that the returned duration_in_traffic should be shorter than the actual travel time on most days, though occasional days with particularly good traffic conditions may be faster than this value.\nThe default value of `best_guess` will give the most useful predictions for the vast majority of use cases. It is possible the `best_guess` travel time prediction may be shorter than `optimistic`, or alternatively, longer than `pessimistic`, due to the way the `best_guess` prediction model integrates live traffic information.\n",
															"key": "traffic_model",
															"value": "best_guess"
														},
														{
															"description": "Specifies one or more preferred modes of transit. This parameter may only be specified for transit directions. The parameter supports the following arguments:\n* `bus` indicates that the calculated route should prefer travel by bus.\n* `subway` indicates that the calculated route should prefer travel by subway.\n* `train` indicates that the calculated route should prefer travel by train.\n* `tram` indicates that the calculated route should prefer travel by tram and light rail.\n* `rail` indicates that the calculated route should prefer travel by train, tram, light rail, and subway. This is equivalent to `transit_mode=train|tram|subway`.\n",
															"key": "transit_mode",
															"value": "<string>"
														},
														{
															"description": "Specifies preferences for transit routes. Using this parameter, you can bias the options returned, rather than accepting the default best route chosen by the API. This parameter may only be specified for transit directions. The parameter supports the following arguments:\n* `less_walking` indicates that the calculated route should prefer limited amounts of walking.\n* `fewer_transfers` indicates that the calculated route should prefer a limited number of transfers.\n",
															"key": "transit_routing_preference",
															"value": "fewer_transfers"
														}
													]
												},
												"description": "The Directions API is a web service that uses an HTTP request to return JSON or XML-formatted directions between locations. You can receive directions for several modes of transportation, such as transit, driving, walking, or cycling."
											},
											"response": [
												{
													"id": "28665b2b-15ff-41f8-80ec-8431da83827e",
													"name": "200 OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/directions/json?arrival_time=<number>&departure_time=<number>&alternatives=<boolean>&avoid=<string>&destination=<string>&origin=<string>&units=metric&waypoints=<string>&language=en&mode=walking&region=en&traffic_model=best_guess&transit_mode=<string>&transit_routing_preference=fewer_transfers&key=<API Key>",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"directions",
																"json"
															],
															"query": [
																{
																	"description": "Specifies the desired time of arrival for transit directions, in seconds since midnight, January 1, 1970 UTC. You can specify either `departure_time` or `arrival_time`, but not both. Note that `arrival_time` must be specified as an integer.\n",
																	"key": "arrival_time",
																	"value": "<number>"
																},
																{
																	"description": "Specifies the desired time of departure. You can specify the time as an integer in seconds since midnight, January 1, 1970 UTC. If a `departure_time` later than 9999-12-31T23:59:59.999999999Z is specified, the API will fall back the `departure_time` to 9999-12-31T23:59:59.999999999Z. Alternatively, you can specify a value of now, which sets the departure time to the current time (correct to the nearest second). The departure time may be specified in two cases:\n* For requests where the travel mode is transit: You can optionally specify one of `departure_time` or `arrival_time`. If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time).\n* For requests where the travel mode is driving: You can specify the `departure_time` to receive a route and trip duration (response field: duration_in_traffic) that take traffic conditions into account. The `departure_time` must be set to the current time or some time in the future. It cannot be in the past.\n\n<div class=\"note\">Note: If departure time is not specified, choice of route and duration are based on road network and average time-independent traffic conditions. Results for a given request may vary over time due to changes in the road network, updated average traffic conditions, and the distributed nature of the service. Results may also vary between nearly-equivalent routes at any time or frequency.</div>\n<div class=\"note\">Note: Distance Matrix requests specifying `departure_time` when `mode=driving` are limited to a maximum of 100 elements per request. The number of origins times the number of destinations defines the number of elements.</div>\n",
																	"key": "departure_time",
																	"value": "<number>"
																},
																{
																	"description": "If set to `true`, specifies that the Directions service may provide more than one route alternative in the response. Note that providing route alternatives may increase the response time from the server. This is only available for requests without intermediate waypoints. For more information, see the [guide to waypoints](https://developers.google.com/maps/documentation/directions/get-directions#Waypoints).\n",
																	"key": "alternatives",
																	"value": "<boolean>"
																},
																{
																	"description": "Indicates that the calculated route(s) should avoid the indicated features. This parameter supports the following arguments:\n* `tolls` indicates that the calculated route should avoid toll roads/bridges.\n* `highways` indicates that the calculated route should avoid highways.\n* `ferries` indicates that the calculated route should avoid ferries.\n* `indoor` indicates that the calculated route should avoid indoor steps for walking and transit directions.\n\nIt's possible to request a route that avoids any combination of tolls, highways and ferries by passing multiple restrictions to the avoid parameter. For example: \n\n```\navoid=tolls|highways|ferries.\n```\n",
																	"key": "avoid",
																	"value": "<string>"
																},
																{
																	"description": "(Required) The place ID, address, or textual latitude/longitude value to which you wish to calculate directions. The options for the destination parameter are the same as for the origin parameter.",
																	"key": "destination",
																	"value": "<string>"
																},
																{
																	"description": "(Required) The place ID, address, or textual latitude/longitude value from which you wish to calculate directions.\n* Place IDs must be prefixed with `place_id:`. You can retrieve place IDs from the Geocoding API and the Places API (including Place Autocomplete). For an example using place IDs from Place Autocomplete, see [Place Autocomplete and Directions](https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-directions). For more about place IDs, see the [Place ID overview](https://developers.google.com/maps/documentation/places/web-service/place-id).\n  \n  ```\n  origin=place_id:ChIJ3S-JXmauEmsRUcIaWtf4MzE\n  ```\n  \n* If you pass an address, the Directions service geocodes the string and converts it to a latitude/longitude coordinate to calculate directions. This coordinate may be different from that returned by the Geocoding API, for example a building entrance rather than its center.\n  \n  ```\n  origin=24+Sussex+Drive+Ottawa+ON\n  ```\n  \n  Using place IDs is preferred over using addresses or latitude/longitude coordinates. Using coordinates will always result in the point being snapped to the road nearest to those coordinates - which may not be an access point to the property, or even a road that will quickly or safely lead to the destination.\n* If you pass coordinates, the point will snap to the nearest road. Passing a place ID is preferred. If you do pass coordinates, ensure that no space exists between the latitude and longitude values.\n  \n  ```\n  origin=41.43206,-81.38992\n  ```\n\n* Plus codes must be formatted as a global code or a compound code. Format plus codes as shown here (plus signs are url-escaped to `%2B` and spaces are url-escaped to `%20`). \n  \n  * **Global code** is a 4 character area code and 6 character or longer local code (849VCWC8+R9 is `849VCWC8%2BR9`). \n  * **Compound code** is a 6 character or longer local code with an explicit location (CWC8+R9 Mountain View, CA, USA is `CWC8%2BR9%20Mountain%20View%20CA%20USA`).\n\n<div class=\"note\">Note: For efficiency and accuracy, use place ID's when possible. These ID's are uniquely explicit like a lat/lng value pair and provide geocoding benefits for routing such as access points and traffic variables. Unlike an address, ID's do not require the service to perform a search or an intermediate request for place details; therefore, performance is better.</div>\n",
																	"key": "origin",
																	"value": "<string>"
																},
																{
																	"description": "Specifies the unit system to use when displaying results.\n\nDirections results contain text within distance fields that may be displayed to the user to indicate the distance of a particular \"step\" of the route. By default, this text uses the unit system of the origin's country or region.\n\nFor example, a route from \"Chicago, IL\" to \"Toronto, ONT\" will display results in miles, while the reverse route will display results in kilometers. You may override this unit system by setting one explicitly within the request's units parameter, passing one of the following values:\n\n* `metric` specifies usage of the metric system. Textual distances are returned using kilometers and meters.\n* `imperial` specifies usage of the Imperial (English) system. Textual distances are returned using miles and feet.\n\n<div class=\"note\">Note: this unit system setting only affects the text displayed within distance fields. The distance fields also contain values which are always expressed in meters.</div>\n",
																	"key": "units",
																	"value": "metric"
																},
																{
																	"description": "<div class=\"caution\">Caution: Requests using more than 10 waypoints (between 11 and 25), or waypoint optimization, are billed at a higher rate. <a href=\"https://developers.google.com/maps/billing-and-pricing/pricing#directions-advanced\">Learn more about billing</a> for Google Maps Platform products.</div>\n\nSpecifies an array of intermediate locations to include along the route between the origin and destination points as pass through or stopover locations. Waypoints alter a route by directing it through the specified location(s). The API supports waypoints for these travel modes: driving, walking and bicycling; not transit.   You can supply one or more locations separated by the pipe character (`|` or `%7C`), in the form of a place ID, an address, or latitude/longitude coordinates. By default, the Directions service calculates a route using the waypoints in the order they are given. The precedence for parsing the value of the waypoint is place ID, latitude/longitude coordinates, then address.\n* If you pass a place ID, you must prefix it with `place_id:`. You can retrieve place IDs from the Geocoding API and the Places API (including Place Autocomplete). For an example using place IDs from Place Autocomplete, see [Place Autocomplete and Directions](/maps/documentation/javascript/examples/places-autocomplete-directions). For more about place IDs, see the [Place ID overview](/maps/documentation/places/web-service/place-id).\n  <div class=\"note\">For efficiency and accuracy, use place ID's when possible. These ID's are uniquely explicit like a lat/lng value pair and provide geocoding benefits for routing such as access points and traffic variables. Unlike an address, ID's do not require the service to perform a search or an intermediate request for place details; therefore, performance is better.</div>\n* If you pass latitude/longitude coordinates, the values go directly to the front-end server to calculate directions without geocoding. The points are snapped to roads and might not provide the accuracy your app needs. Use coordinates when you are confident the values truly specify the points your app needs for routing without regard to possible access points or additional geocoding details. Ensure that a comma (`%2C`) and not a space (`%20`) separates the latitude and longitude values.\n* If you pass an address, the Directions service will geocode the string and convert it into latitude/longitude coordinates to calculate directions. If the address value is ambiguous, the value might evoke a search to disambiguate from similar addresses. For example, \"1st Street\" could be a complete value or a partial value for \"1st street NE\" or \"1st St SE\". This result may be different from that returned by the Geocoding API. You can avoid possible misinterpretations using place IDs.\n* Alternatively, you can supply an encoded set of points using the [Encoded Polyline Algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm). You will find an encoded set is useful for a large number of waypoints, because the URL is significantly shorter. All web services have a URL limit of 8192 characters.\n  * Encoded polylines must be prefixed with `enc:` and followed by a colon (`:`). For example: `waypoints=enc:gfo}EtohhU:`.\n  * You can also include multiple encoded polylines, separated by the pipe character (`|`). For example, `waypoints=via:enc:wc~oAwquwMdlTxiKtqLyiK:|enc:c~vnAamswMvlTor@tjGi}L:| via:enc:udymA{~bxM:`\n\n##### Influence routes with stopover and pass through points\n\nFor each waypoint in the request, the directions response appends an entry to the `legs` array to provide the details for stopovers on that leg of the journey.\n\nIf you'd like to influence the route using waypoints without adding a stopover, add the prefix `via:` to the waypoint. Waypoints prefixed with `via:` will not add an entry to the `legs` array, but will route the journey through the waypoint.\n\nThe following URL modifies the previous request such that the journey is routed through Lexington without stopping:\n\n```\nhttps://maps.googleapis.com/maps/api/directions/json?\norigin=Boston,MA&destination=Concord,MA\n&waypoints=Charlestown,MA|via:Lexington,MA  \n```\n\nThe `via:` prefix is most effective when creating routes in response to the user dragging the waypoints on the map. Doing so allows the user to see how the final route may look in real-time and helps ensure that waypoints are placed in locations that are accessible to the Directions API.\n\n<div class=\"caution\">Caution: Using the `via:` prefix to avoid stopovers results in directions that are strict in their interpretation of the waypoint. This interpretation may result in severe detours on the route or `ZERO_RESULTS` in the response status code if the Directions API is unable to create directions through that point.</div>\n\n\n##### Optimize your waypoints\n\nBy default, the Directions service calculates a route through the provided waypoints in their given order. Optionally, you may pass `optimize:true` as the first argument within the waypoints parameter to allow the Directions service to optimize the provided route by rearranging the waypoints in a more efficient order. (This optimization is an application of the traveling salesperson problem.) Travel time is the primary factor which is optimized, but other factors such as distance, number of turns and many more may be taken into account when deciding which route is the most efficient. All waypoints must be stopovers for the Directions service to optimize their route.\n\nIf you instruct the Directions service to optimize the order of its waypoints, their order will be returned in the `waypoint_order` field within the routes object. The `waypoint_order` field returns values which are zero-based.\n\nThe following example calculates a road journey from Adelaide, South Australia to each of South Australia's main wine regions using route optimization.\n\n```\nhttps://maps.googleapis.com/maps/api/directions/json?\norigin=Adelaide,SA&destination=Adelaide,SA\n&waypoints=optimize:true|Barossa+Valley,SA|Clare,SA|Connawarra,SA|McLaren+Vale,SA\n```\n\nInspection of the calculated route will indicate that calculation uses waypoints in the following waypoint order:\n\n```\n\"waypoint_order\": [ 3, 2, 0, 1 ]\n```\n\n<div class=\"caution\">Caution: Requests using waypoint optimization are billed at a higher rate. <a href=\"https://developers.google.com/maps/billing-and-pricing/pricing#directions-advanced\">Learn more about how Google Maps Platform products are billed.</a></div>\n",
																	"key": "waypoints",
																	"value": "<string>"
																},
																{
																	"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																	"key": "language",
																	"value": "en"
																},
																{
																	"description": "For the calculation of distances and directions, you may specify the transportation mode to use. By default, `DRIVING` mode is used. By default, directions are calculated as driving directions. The following travel modes are supported:\n\n* `driving` (default) indicates standard driving directions or distance using the road network.\n* `walking` requests walking directions or distance via pedestrian paths & sidewalks (where available).\n* `bicycling` requests bicycling directions or distance via bicycle paths & preferred streets (where available).\n* `transit` requests directions or distance via public transit routes (where available). If you set the mode to transit, you can optionally specify either a `departure_time` or an `arrival_time`. If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time). You can also optionally include a `transit_mode` and/or a `transit_routing_preference`.\n\n<div class=\"note\">Note: Both walking and bicycling directions may sometimes not include clear pedestrian or bicycling paths, so these directions will return warnings in the returned result which you must display to the user.</div>\n",
																	"key": "mode",
																	"value": "walking"
																},
																{
																	"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
																	"key": "region",
																	"value": "en"
																},
																{
																	"description": "Specifies the assumptions to use when calculating time in traffic. This setting affects the value returned in the duration_in_traffic field in the response, which contains the predicted time in traffic based on historical averages. The `traffic_model` parameter may only be specified for driving directions where the request includes a `departure_time`. The available values for this parameter are:\n* `best_guess` (default) indicates that the returned duration_in_traffic should be the best estimate of travel time given what is known about both historical traffic conditions and live traffic. Live traffic becomes more important the closer the `departure_time` is to now.\n* `pessimistic` indicates that the returned duration_in_traffic should be longer than the actual travel time on most days, though occasional days with particularly bad traffic conditions may exceed this value.\n* `optimistic` indicates that the returned duration_in_traffic should be shorter than the actual travel time on most days, though occasional days with particularly good traffic conditions may be faster than this value.\nThe default value of `best_guess` will give the most useful predictions for the vast majority of use cases. It is possible the `best_guess` travel time prediction may be shorter than `optimistic`, or alternatively, longer than `pessimistic`, due to the way the `best_guess` prediction model integrates live traffic information.\n",
																	"key": "traffic_model",
																	"value": "best_guess"
																},
																{
																	"description": "Specifies one or more preferred modes of transit. This parameter may only be specified for transit directions. The parameter supports the following arguments:\n* `bus` indicates that the calculated route should prefer travel by bus.\n* `subway` indicates that the calculated route should prefer travel by subway.\n* `train` indicates that the calculated route should prefer travel by train.\n* `tram` indicates that the calculated route should prefer travel by tram and light rail.\n* `rail` indicates that the calculated route should prefer travel by train, tram, light rail, and subway. This is equivalent to `transit_mode=train|tram|subway`.\n",
																	"key": "transit_mode",
																	"value": "<string>"
																},
																{
																	"description": "Specifies preferences for transit routes. Using this parameter, you can bias the options returned, rather than accepting the default best route chosen by the API. This parameter may only be specified for transit directions. The parameter supports the following arguments:\n* `less_walking` indicates that the calculated route should prefer limited amounts of walking.\n* `fewer_transfers` indicates that the calculated route should prefer a limited number of transfers.\n",
																	"key": "transit_routing_preference",
																	"value": "fewer_transfers"
																},
																{
																	"description": "Added as a part of security scheme: apikey",
																	"key": "key",
																	"value": "<API Key>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"routes\": [\n    {\n      \"bounds\": {\n        \"northeast\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        },\n        \"southwest\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        }\n      },\n      \"copyrights\": \"<string>\",\n      \"legs\": [\n        {\n          \"end_address\": \"<string>\",\n          \"end_location\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"start_address\": \"<string>\",\n          \"start_location\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"steps\": [\n            {\n              \"duration\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"end_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"start_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"html_instructions\": \"<string>\",\n              \"polyline\": {\n                \"points\": \"<string>\"\n              },\n              \"travel_mode\": \"BICYCLING\",\n              \"distance\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"maneuver\": \"ferry\",\n              \"transit_details\": {\n                \"arrival_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"arrival_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"departure_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"departure_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"headsign\": \"<string>\",\n                \"headway\": \"<integer>\",\n                \"line\": {\n                  \"agencies\": [\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    },\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    }\n                  ],\n                  \"name\": \"<string>\",\n                  \"color\": \"<string>\",\n                  \"short_name\": \"<string>\",\n                  \"text_color\": \"<string>\",\n                  \"url\": \"<string>\",\n                  \"icon\": \"<string>\",\n                  \"vehicle\": {\n                    \"type\": \"FERRY\",\n                    \"name\": \"<string>\",\n                    \"icon\": \"<string>\",\n                    \"local_icon\": \"<string>\"\n                  }\n                },\n                \"num_stops\": \"<integer>\",\n                \"trip_short_name\": \"<string>\"\n              },\n              \"steps\": {\n                \"description\": \"Contains detailed directions for walking or driving steps in transit directions. Substeps are only available when travel_mode is set to \\\"transit\\\". The inner steps array is of the same type as steps.\"\n              }\n            },\n            {\n              \"duration\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"end_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"start_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"html_instructions\": \"<string>\",\n              \"polyline\": {\n                \"points\": \"<string>\"\n              },\n              \"travel_mode\": \"WALKING\",\n              \"distance\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"maneuver\": \"turn-slight-right\",\n              \"transit_details\": {\n                \"arrival_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"arrival_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"departure_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"departure_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"headsign\": \"<string>\",\n                \"headway\": \"<integer>\",\n                \"line\": {\n                  \"agencies\": [\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    },\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    }\n                  ],\n                  \"name\": \"<string>\",\n                  \"color\": \"<string>\",\n                  \"short_name\": \"<string>\",\n                  \"text_color\": \"<string>\",\n                  \"url\": \"<string>\",\n                  \"icon\": \"<string>\",\n                  \"vehicle\": {\n                    \"type\": \"SHARE_TAXI\",\n                    \"name\": \"<string>\",\n                    \"icon\": \"<string>\",\n                    \"local_icon\": \"<string>\"\n                  }\n                },\n                \"num_stops\": \"<integer>\",\n                \"trip_short_name\": \"<string>\"\n              },\n              \"steps\": {\n                \"description\": \"Contains detailed directions for walking or driving steps in transit directions. Substeps are only available when travel_mode is set to \\\"transit\\\". The inner steps array is of the same type as steps.\"\n              }\n            }\n          ],\n          \"traffic_speed_entry\": [\n            {\n              \"speed_category\": \"<string>\",\n              \"offset_meters\": \"<number>\"\n            },\n            {\n              \"speed_category\": \"<string>\",\n              \"offset_meters\": \"<number>\"\n            }\n          ],\n          \"via_waypoint\": [\n            {\n              \"location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"step_index\": \"<integer>\",\n              \"step_interpolation\": \"<number>\"\n            },\n            {\n              \"location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"step_index\": \"<integer>\",\n              \"step_interpolation\": \"<number>\"\n            }\n          ],\n          \"arrival_time\": {\n            \"text\": \"<string>\",\n            \"time_zone\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"departure_time\": {\n            \"text\": \"<string>\",\n            \"time_zone\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"distance\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration_in_traffic\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          }\n        },\n        {\n          \"end_address\": \"<string>\",\n          \"end_location\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"start_address\": \"<string>\",\n          \"start_location\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"steps\": [\n            {\n              \"duration\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"end_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"start_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"html_instructions\": \"<string>\",\n              \"polyline\": {\n                \"points\": \"<string>\"\n              },\n              \"travel_mode\": \"BICYCLING\",\n              \"distance\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"maneuver\": \"roundabout-left\",\n              \"transit_details\": {\n                \"arrival_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"arrival_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"departure_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"departure_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"headsign\": \"<string>\",\n                \"headway\": \"<integer>\",\n                \"line\": {\n                  \"agencies\": [\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    },\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    }\n                  ],\n                  \"name\": \"<string>\",\n                  \"color\": \"<string>\",\n                  \"short_name\": \"<string>\",\n                  \"text_color\": \"<string>\",\n                  \"url\": \"<string>\",\n                  \"icon\": \"<string>\",\n                  \"vehicle\": {\n                    \"type\": \"RAIL\",\n                    \"name\": \"<string>\",\n                    \"icon\": \"<string>\",\n                    \"local_icon\": \"<string>\"\n                  }\n                },\n                \"num_stops\": \"<integer>\",\n                \"trip_short_name\": \"<string>\"\n              },\n              \"steps\": {\n                \"description\": \"Contains detailed directions for walking or driving steps in transit directions. Substeps are only available when travel_mode is set to \\\"transit\\\". The inner steps array is of the same type as steps.\"\n              }\n            },\n            {\n              \"duration\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"end_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"start_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"html_instructions\": \"<string>\",\n              \"polyline\": {\n                \"points\": \"<string>\"\n              },\n              \"travel_mode\": \"WALKING\",\n              \"distance\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"maneuver\": \"turn-slight-right\",\n              \"transit_details\": {\n                \"arrival_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"arrival_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"departure_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"departure_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"headsign\": \"<string>\",\n                \"headway\": \"<integer>\",\n                \"line\": {\n                  \"agencies\": [\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    },\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    }\n                  ],\n                  \"name\": \"<string>\",\n                  \"color\": \"<string>\",\n                  \"short_name\": \"<string>\",\n                  \"text_color\": \"<string>\",\n                  \"url\": \"<string>\",\n                  \"icon\": \"<string>\",\n                  \"vehicle\": {\n                    \"type\": \"MONORAIL\",\n                    \"name\": \"<string>\",\n                    \"icon\": \"<string>\",\n                    \"local_icon\": \"<string>\"\n                  }\n                },\n                \"num_stops\": \"<integer>\",\n                \"trip_short_name\": \"<string>\"\n              },\n              \"steps\": {\n                \"description\": \"Contains detailed directions for walking or driving steps in transit directions. Substeps are only available when travel_mode is set to \\\"transit\\\". The inner steps array is of the same type as steps.\"\n              }\n            }\n          ],\n          \"traffic_speed_entry\": [\n            {\n              \"speed_category\": \"<string>\",\n              \"offset_meters\": \"<number>\"\n            },\n            {\n              \"speed_category\": \"<string>\",\n              \"offset_meters\": \"<number>\"\n            }\n          ],\n          \"via_waypoint\": [\n            {\n              \"location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"step_index\": \"<integer>\",\n              \"step_interpolation\": \"<number>\"\n            },\n            {\n              \"location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"step_index\": \"<integer>\",\n              \"step_interpolation\": \"<number>\"\n            }\n          ],\n          \"arrival_time\": {\n            \"text\": \"<string>\",\n            \"time_zone\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"departure_time\": {\n            \"text\": \"<string>\",\n            \"time_zone\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"distance\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration_in_traffic\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          }\n        }\n      ],\n      \"overview_polyline\": {\n        \"points\": \"<string>\"\n      },\n      \"summary\": \"<string>\",\n      \"warnings\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"waypoint_order\": [\n        \"<integer>\",\n        \"<integer>\"\n      ],\n      \"fare\": {\n        \"currency\": \"<string>\",\n        \"value\": \"<number>\",\n        \"text\": \"<string>\"\n      }\n    },\n    {\n      \"bounds\": {\n        \"northeast\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        },\n        \"southwest\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        }\n      },\n      \"copyrights\": \"<string>\",\n      \"legs\": [\n        {\n          \"end_address\": \"<string>\",\n          \"end_location\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"start_address\": \"<string>\",\n          \"start_location\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"steps\": [\n            {\n              \"duration\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"end_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"start_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"html_instructions\": \"<string>\",\n              \"polyline\": {\n                \"points\": \"<string>\"\n              },\n              \"travel_mode\": \"WALKING\",\n              \"distance\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"maneuver\": \"roundabout-right\",\n              \"transit_details\": {\n                \"arrival_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"arrival_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"departure_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"departure_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"headsign\": \"<string>\",\n                \"headway\": \"<integer>\",\n                \"line\": {\n                  \"agencies\": [\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    },\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    }\n                  ],\n                  \"name\": \"<string>\",\n                  \"color\": \"<string>\",\n                  \"short_name\": \"<string>\",\n                  \"text_color\": \"<string>\",\n                  \"url\": \"<string>\",\n                  \"icon\": \"<string>\",\n                  \"vehicle\": {\n                    \"type\": \"BUS\",\n                    \"name\": \"<string>\",\n                    \"icon\": \"<string>\",\n                    \"local_icon\": \"<string>\"\n                  }\n                },\n                \"num_stops\": \"<integer>\",\n                \"trip_short_name\": \"<string>\"\n              },\n              \"steps\": {\n                \"description\": \"Contains detailed directions for walking or driving steps in transit directions. Substeps are only available when travel_mode is set to \\\"transit\\\". The inner steps array is of the same type as steps.\"\n              }\n            },\n            {\n              \"duration\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"end_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"start_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"html_instructions\": \"<string>\",\n              \"polyline\": {\n                \"points\": \"<string>\"\n              },\n              \"travel_mode\": \"BICYCLING\",\n              \"distance\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"maneuver\": \"keep-right\",\n              \"transit_details\": {\n                \"arrival_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"arrival_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"departure_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"departure_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"headsign\": \"<string>\",\n                \"headway\": \"<integer>\",\n                \"line\": {\n                  \"agencies\": [\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    },\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    }\n                  ],\n                  \"name\": \"<string>\",\n                  \"color\": \"<string>\",\n                  \"short_name\": \"<string>\",\n                  \"text_color\": \"<string>\",\n                  \"url\": \"<string>\",\n                  \"icon\": \"<string>\",\n                  \"vehicle\": {\n                    \"type\": \"FERRY\",\n                    \"name\": \"<string>\",\n                    \"icon\": \"<string>\",\n                    \"local_icon\": \"<string>\"\n                  }\n                },\n                \"num_stops\": \"<integer>\",\n                \"trip_short_name\": \"<string>\"\n              },\n              \"steps\": {\n                \"description\": \"Contains detailed directions for walking or driving steps in transit directions. Substeps are only available when travel_mode is set to \\\"transit\\\". The inner steps array is of the same type as steps.\"\n              }\n            }\n          ],\n          \"traffic_speed_entry\": [\n            {\n              \"speed_category\": \"<string>\",\n              \"offset_meters\": \"<number>\"\n            },\n            {\n              \"speed_category\": \"<string>\",\n              \"offset_meters\": \"<number>\"\n            }\n          ],\n          \"via_waypoint\": [\n            {\n              \"location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"step_index\": \"<integer>\",\n              \"step_interpolation\": \"<number>\"\n            },\n            {\n              \"location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"step_index\": \"<integer>\",\n              \"step_interpolation\": \"<number>\"\n            }\n          ],\n          \"arrival_time\": {\n            \"text\": \"<string>\",\n            \"time_zone\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"departure_time\": {\n            \"text\": \"<string>\",\n            \"time_zone\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"distance\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration_in_traffic\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          }\n        },\n        {\n          \"end_address\": \"<string>\",\n          \"end_location\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"start_address\": \"<string>\",\n          \"start_location\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"steps\": [\n            {\n              \"duration\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"end_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"start_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"html_instructions\": \"<string>\",\n              \"polyline\": {\n                \"points\": \"<string>\"\n              },\n              \"travel_mode\": \"DRIVING\",\n              \"distance\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"maneuver\": \"roundabout-right\",\n              \"transit_details\": {\n                \"arrival_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"arrival_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"departure_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"departure_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"headsign\": \"<string>\",\n                \"headway\": \"<integer>\",\n                \"line\": {\n                  \"agencies\": [\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    },\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    }\n                  ],\n                  \"name\": \"<string>\",\n                  \"color\": \"<string>\",\n                  \"short_name\": \"<string>\",\n                  \"text_color\": \"<string>\",\n                  \"url\": \"<string>\",\n                  \"icon\": \"<string>\",\n                  \"vehicle\": {\n                    \"type\": \"FERRY\",\n                    \"name\": \"<string>\",\n                    \"icon\": \"<string>\",\n                    \"local_icon\": \"<string>\"\n                  }\n                },\n                \"num_stops\": \"<integer>\",\n                \"trip_short_name\": \"<string>\"\n              },\n              \"steps\": {\n                \"description\": \"Contains detailed directions for walking or driving steps in transit directions. Substeps are only available when travel_mode is set to \\\"transit\\\". The inner steps array is of the same type as steps.\"\n              }\n            },\n            {\n              \"duration\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"end_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"start_location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"html_instructions\": \"<string>\",\n              \"polyline\": {\n                \"points\": \"<string>\"\n              },\n              \"travel_mode\": \"WALKING\",\n              \"distance\": {\n                \"text\": \"<string>\",\n                \"value\": \"<number>\"\n              },\n              \"maneuver\": \"turn-left\",\n              \"transit_details\": {\n                \"arrival_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"arrival_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"departure_stop\": {\n                  \"location\": {\n                    \"lat\": \"<number>\",\n                    \"lng\": \"<number>\"\n                  },\n                  \"name\": \"<string>\"\n                },\n                \"departure_time\": {\n                  \"text\": \"<string>\",\n                  \"time_zone\": \"<string>\",\n                  \"value\": \"<number>\"\n                },\n                \"headsign\": \"<string>\",\n                \"headway\": \"<integer>\",\n                \"line\": {\n                  \"agencies\": [\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    },\n                    {\n                      \"name\": \"<string>\",\n                      \"phone\": \"<string>\",\n                      \"url\": \"<string>\"\n                    }\n                  ],\n                  \"name\": \"<string>\",\n                  \"color\": \"<string>\",\n                  \"short_name\": \"<string>\",\n                  \"text_color\": \"<string>\",\n                  \"url\": \"<string>\",\n                  \"icon\": \"<string>\",\n                  \"vehicle\": {\n                    \"type\": \"TROLLEYBUS\",\n                    \"name\": \"<string>\",\n                    \"icon\": \"<string>\",\n                    \"local_icon\": \"<string>\"\n                  }\n                },\n                \"num_stops\": \"<integer>\",\n                \"trip_short_name\": \"<string>\"\n              },\n              \"steps\": {\n                \"description\": \"Contains detailed directions for walking or driving steps in transit directions. Substeps are only available when travel_mode is set to \\\"transit\\\". The inner steps array is of the same type as steps.\"\n              }\n            }\n          ],\n          \"traffic_speed_entry\": [\n            {\n              \"speed_category\": \"<string>\",\n              \"offset_meters\": \"<number>\"\n            },\n            {\n              \"speed_category\": \"<string>\",\n              \"offset_meters\": \"<number>\"\n            }\n          ],\n          \"via_waypoint\": [\n            {\n              \"location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"step_index\": \"<integer>\",\n              \"step_interpolation\": \"<number>\"\n            },\n            {\n              \"location\": {\n                \"lat\": \"<number>\",\n                \"lng\": \"<number>\"\n              },\n              \"step_index\": \"<integer>\",\n              \"step_interpolation\": \"<number>\"\n            }\n          ],\n          \"arrival_time\": {\n            \"text\": \"<string>\",\n            \"time_zone\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"departure_time\": {\n            \"text\": \"<string>\",\n            \"time_zone\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"distance\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration_in_traffic\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          }\n        }\n      ],\n      \"overview_polyline\": {\n        \"points\": \"<string>\"\n      },\n      \"summary\": \"<string>\",\n      \"warnings\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"waypoint_order\": [\n        \"<integer>\",\n        \"<integer>\"\n      ],\n      \"fare\": {\n        \"currency\": \"<string>\",\n        \"value\": \"<number>\",\n        \"text\": \"<string>\"\n      }\n    }\n  ],\n  \"status\": \"MAX_ROUTE_LENGTH_EXCEEDED\",\n  \"geocoded_waypoints\": [\n    {\n      \"geocoder_status\": \"OK\",\n      \"partial_match\": {\n        \"description\": \"Indicates that the geocoder did not return an exact match for the original request, though it was able to match part of the requested address. You may wish to examine the original request for misspellings and/or an incomplete address.\\n\\nPartial matches most often occur for street addresses that do not exist within the locality you pass in the request. Partial matches may also be returned when a request matches two or more locations in the same locality. For example, \\\"21 Henr St, Bristol, UK\\\" will return a partial match for both Henry Street and Henrietta Street. Note that if a request includes a misspelled address component, the geocoding service may suggest an alternative address. Suggestions triggered in this way will also be marked as a partial match.\\n\"\n      },\n      \"place_id\": \"<string>\",\n      \"types\": [\n        \"intersection\",\n        \"route\"\n      ]\n    },\n    {\n      \"geocoder_status\": \"ZERO_RESULTS\",\n      \"partial_match\": {\n        \"description\": \"Indicates that the geocoder did not return an exact match for the original request, though it was able to match part of the requested address. You may wish to examine the original request for misspellings and/or an incomplete address.\\n\\nPartial matches most often occur for street addresses that do not exist within the locality you pass in the request. Partial matches may also be returned when a request matches two or more locations in the same locality. For example, \\\"21 Henr St, Bristol, UK\\\" will return a partial match for both Henry Street and Henrietta Street. Note that if a request includes a misspelled address component, the geocoding service may suggest an alternative address. Suggestions triggered in this way will also be marked as a partial match.\\n\"\n      },\n      \"place_id\": \"<string>\",\n      \"types\": [\n        \"administrative_area_level_3\",\n        \"plus_code\"\n      ]\n    }\n  ],\n  \"available_travel_modes\": [\n    \"BICYCLING\",\n    \"TRANSIT\"\n  ],\n  \"error_message\": \"<string>\"\n}"
												}
											]
										}
									],
									"id": "10e3e9b4-aed3-4dbe-9d61-b999892aca6a"
								}
							],
							"id": "7cc3e598-a63d-4ae8-80c1-69dd5c8e1faa"
						},
						{
							"name": "elevation",
							"item": [
								{
									"name": "json",
									"item": [
										{
											"name": "The Elevation API provides a simple interface to query locations on the earth for elevation data. Additionally, you may request sampled elevation data along paths, allowing you to calculate elevation changes along routes. With the Elevation API, you can d",
											"id": "a325c1ef-5b8f-4fbd-a774-729c78e8037e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://maps.googleapis.com/maps/api/elevation/json?locations=<string>|<string>&path=<string>|<string>&samples=<number>",
													"protocol": "https",
													"host": [
														"maps",
														"googleapis",
														"com"
													],
													"path": [
														"maps",
														"api",
														"elevation",
														"json"
													],
													"query": [
														{
															"description": "Positional requests are indicated through use of the locations parameter, indicating elevation requests for the specific locations passed as latitude/longitude values.\n\nThe locations parameter may take the following arguments:\n\n- A single coordinate: `locations=40.714728,-73.998672`\n- An array of coordinates separated using the pipe ('|') character: \n  ```\n  locations=40.714728,-73.998672|-34.397,150.644\n  ```\n- A set of encoded coordinates using the [Encoded Polyline Algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm): \n  ```\n  locations=enc:gfo}EtohhU\n  ```\n\nLatitude and longitude coordinate strings are defined using numerals within a comma-separated text string. For example, \"40.714728,-73.998672\" is a valid locations value. Latitude and longitude values must correspond to a valid location on the face of the earth. Latitudes can take any value between -90 and 90 while longitude values can take any value between -180 and 180. If you specify an invalid latitude or longitude value, your request will be rejected as a bad request.\n\nYou may pass any number of multiple coordinates within an array or encoded polyline, while still constructing a valid URL. Note that when passing multiple coordinates, the accuracy of any returned data may be of lower resolution than when requesting data for a single coordinate.\n",
															"key": "locations",
															"value": "<string>|<string>"
														},
														{
															"description": "An array of comma separated `latitude,longitude` strings.",
															"key": "path",
															"value": "<string>|<string>"
														},
														{
															"description": "Required if path parameter is set.",
															"key": "samples",
															"value": "<number>"
														}
													]
												},
												"description": "The Elevation API provides a simple interface to query locations on the earth for elevation data. Additionally, you may request sampled elevation data along paths, allowing you to calculate elevation changes along routes. With the Elevation API, you can develop hiking and biking applications, positioning applications, or low resolution surveying applications.\n\nElevation data is available for all locations on the surface of the earth, including depth locations on the ocean floor (which return negative values). In those cases where Google does not possess exact elevation measurements at the precise location you request, the service interpolates and returns an averaged value using the four nearest locations. Elevation values are expressed relative to local mean sea level (LMSL).\n\nRequests to the Elevation API utilize different parameters based on whether the request is for discrete locations or for an ordered path. For discrete locations, requests for elevation return data on the specific locations passed in the request; for paths, elevation requests are instead sampled along the given path.\n"
											},
											"response": [
												{
													"id": "bb1f8daa-5fef-40c1-9f3d-601283b3daaf",
													"name": "200 OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/elevation/json?locations=<string>|<string>&path=<string>|<string>&samples=<number>&key=<API Key>",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"elevation",
																"json"
															],
															"query": [
																{
																	"description": "Positional requests are indicated through use of the locations parameter, indicating elevation requests for the specific locations passed as latitude/longitude values.\n\nThe locations parameter may take the following arguments:\n\n- A single coordinate: `locations=40.714728,-73.998672`\n- An array of coordinates separated using the pipe ('|') character: \n  ```\n  locations=40.714728,-73.998672|-34.397,150.644\n  ```\n- A set of encoded coordinates using the [Encoded Polyline Algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm): \n  ```\n  locations=enc:gfo}EtohhU\n  ```\n\nLatitude and longitude coordinate strings are defined using numerals within a comma-separated text string. For example, \"40.714728,-73.998672\" is a valid locations value. Latitude and longitude values must correspond to a valid location on the face of the earth. Latitudes can take any value between -90 and 90 while longitude values can take any value between -180 and 180. If you specify an invalid latitude or longitude value, your request will be rejected as a bad request.\n\nYou may pass any number of multiple coordinates within an array or encoded polyline, while still constructing a valid URL. Note that when passing multiple coordinates, the accuracy of any returned data may be of lower resolution than when requesting data for a single coordinate.\n",
																	"key": "locations",
																	"value": "<string>|<string>"
																},
																{
																	"description": "An array of comma separated `latitude,longitude` strings.",
																	"key": "path",
																	"value": "<string>|<string>"
																},
																{
																	"description": "Required if path parameter is set.",
																	"key": "samples",
																	"value": "<number>"
																},
																{
																	"description": "Added as a part of security scheme: apikey",
																	"key": "key",
																	"value": "<API Key>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"INVALID_REQUEST\",\n  \"results\": [\n    {\n      \"elevation\": \"<number>\",\n      \"resolution\": \"<number>\",\n      \"location\": {\n        \"lat\": \"<number>\",\n        \"lng\": \"<number>\"\n      }\n    },\n    {\n      \"elevation\": \"<number>\",\n      \"resolution\": \"<number>\",\n      \"location\": {\n        \"lat\": \"<number>\",\n        \"lng\": \"<number>\"\n      }\n    }\n  ],\n  \"error_message\": \"<string>\"\n}"
												}
											]
										}
									],
									"id": "c02645a3-3ce9-4b1c-aed5-6c5caa8ec278"
								}
							],
							"id": "5d953915-4492-4096-b99d-895d32748b22"
						},
						{
							"name": "geocode",
							"item": [
								{
									"name": "json",
									"item": [
										{
											"name": "The Geocoding API is a service that provides geocoding and reverse geocoding of addresses.\n\n**Geocoding** is the process of converting addresses (like a street address) into geographic coordinates (like latitude and longitude), which you can use to place ",
											"id": "e58ae92d-e26a-40f9-9310-689c0c27957b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://maps.googleapis.com/maps/api/geocode/json?address=<string>&bounds=<string>&bounds=<string>&components=<string>|<string>&latlng=<string>&location_type=ROOFTOP|GEOMETRIC_CENTER&place_id=<string>&result_type=street_address|administrative_area_level_5&language=en&region=en",
													"protocol": "https",
													"host": [
														"maps",
														"googleapis",
														"com"
													],
													"path": [
														"maps",
														"api",
														"geocode",
														"json"
													],
													"query": [
														{
															"description": "The street address or plus code that you want to geocode. Specify addresses in accordance with the format used by the national postal service of the country concerned. Additional address elements such as business names and unit, suite or floor numbers should be avoided. Street address elements should be delimited by spaces (shown here as url-escaped to `%20`):\n\n```\naddress=24%20Sussex%20Drive%20Ottawa%20ON\n```\n\nFormat plus codes as shown here (plus signs are url-escaped to `%2B` and spaces are url-escaped to `%20`):\n- global code is a 4 character area code and 6 character or longer local code (`849VCWC8+R9` is `849VCWC8%2BR9`).\n- compound code is a 6 character or longer local code with an explicit location (`CWC8+R9 Mountain View, CA, USA` is `CWC8%2BR9%20Mountain%20View%20CA%20USA`).\n\n<div class=\"note\">Note: At least one of `address` or `components` is required.</div>",
															"key": "address",
															"value": "<string>"
														},
														{
															"description": "The bounding box of the viewport within which to bias geocode results more prominently. This parameter will only influence, not fully restrict, results from the geocoder.",
															"key": "bounds",
															"value": "<string>"
														},
														{
															"description": "The bounding box of the viewport within which to bias geocode results more prominently. This parameter will only influence, not fully restrict, results from the geocoder.",
															"key": "bounds",
															"value": "<string>"
														},
														{
															"description": "A components filter with elements separated by a pipe (|). The components filter is also accepted as an optional parameter if an address is provided. Each element in the components filter consists of a `component:value` pair, and fully restricts the results from the geocoder.\n\nThe components that can be filtered include:\n\n* `postal_code` matches `postal_code` and `postal_code_prefix`.\n* `country` matches a country name or a two letter ISO 3166-1 country code. The API follows the ISO standard for defining countries, and the filtering works best when using the corresponding ISO code of the country.\n  <aside class=\"note\"><strong>Note</strong>: If you receive unexpected results with a country code, verify that you are using a code which includes the countries, dependent territories, and special areas of geographical interest you intend. You can find code information at Wikipedia: List of ISO 3166 country codes or the ISO Online Browsing Platform.</aside>\n  \nThe following components may be used to influence results, but will not be enforced:\n\n* `route` matches the long or short name of a route.\n* `locality` matches against `locality` and `sublocality` types.\n* `administrative_area` matches all the `administrative_area` levels.\n  \nNotes about component filtering:\n\n* Do not repeat these component filters in requests, or the API will return `INVALID_REQUEST`: \n  * `country`\n  * `postal_code`\n  * `route`\n* If the request contains repeated component filters, the API evaluates those filters as an AND, not an OR.\n* Results are consistent with Google Maps, which occasionally yields unexpected `ZERO_RESULTS` responses. Using Place Autocomplete may provide better results in some use cases. To learn more, see [this FAQ](https://developers..google.com/maps/documentation/geocoding/faq#trbl_component_filtering).\n* For each address component, either specify it in the address parameter or in a components filter, but not both. Specifying the same values in both may result in `ZERO_RESULTS`.\n\n<div class=\"note\">Note: At least one of `address` or `components` is required.</div>",
															"key": "components",
															"value": "<string>|<string>"
														},
														{
															"description": "The street address that you want to geocode, in the format used by the national postal service of the country concerned. Additional address elements such as business names and unit, suite or floor numbers should be avoided.",
															"key": "latlng",
															"value": "<string>"
														},
														{
															"description": "A filter of one or more location types, separated by a pipe (`|`). If the parameter contains multiple location types, the API returns all addresses that match any of the types. A note about processing: The `location_type` parameter does not restrict the search to the specified location type(s). Rather, the `location_type` acts as a post-search filter: the API fetches all results for the specified latlng, then discards those results that do not match the specified location type(s). The following values are supported:\n* `APPROXIMATE` returns only the addresses that are characterized as approximate.\n* `GEOMETRIC_CENTER` returns only geometric centers of a location such as a polyline (for example, a street) or polygon (region).\n* `RANGE_INTERPOLATED` returns only the addresses that reflect an approximation (usually on a road) interpolated between two precise points (such as intersections). An interpolated range generally indicates that rooftop geocodes are unavailable for a street address.\n* `ROOFTOP` returns only the addresses for which Google has location information accurate down to street address precision.",
															"key": "location_type",
															"value": "ROOFTOP|GEOMETRIC_CENTER"
														},
														{
															"description": "A textual identifier that uniquely identifies a place, returned from a [Place Search](https://developers.google.com/maps/documentation/places/web-service/search).\nFor more information about place IDs, see the [place ID overview](https://developers.google.com/maps/documentation/places/web-service/place-id).\n",
															"key": "place_id",
															"value": "<string>"
														},
														{
															"description": "A filter of one or more address types, separated by a pipe (|). If the parameter contains multiple address types, the API returns all addresses that match any of the types. A note about processing: The `result_type` parameter does not restrict the search to the specified address type(s). Rather, the `result_type` acts as a post-search filter: the API fetches all results for the specified `latlng`, then discards those results that do not match the specified address type(s).The following values are supported:\n* `administrative_area_level_1` indicates a first-order civil entity below the country level. Within the United States, these administrative levels are states. Not all nations exhibit these administrative levels. In most cases, administrative_area_level_1   * `short` names will closely match ISO 3166-2 subdivisions and other widely circulated lists; however this is not guaranteed as our geocoding results are based on a variety of signals and location data.\n* `administrative_area_level_2` indicates a second-order civil entity below the country level. Within the United States, these administrative levels are counties. Not all nations exhibit these administrative levels.\n* `administrative_area_level_3` indicates a third-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels.\n* `administrative_area_level_4` indicates a fourth-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels.\n* `administrative_area_level_5` indicates a fifth-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels.\n* `airport` indicates an airport.\n* `colloquial_area` indicates a commonly-used alternative name for the entity.\n* `country` indicates the national political entity, and is typically the highest order type returned by the Geocoder.\n* `intersection` indicates a major intersection, usually of two major roads.\n* `locality` indicates an incorporated city or town political entity.\n* `natural_feature` indicates a prominent natural feature.\n* `neighborhood` indicates a named neighborhood\n* `park` indicates a named park.\n* `plus_code` indicates an encoded location reference, derived from latitude and longitude. Plus codes can be used as a replacement for street addresses in places where they do not exist (where buildings are not numbered or streets are not named). See [https://plus.codes/](https://plus.codes/) for details.\n* `point_of_interest` indicates a named point of interest. Typically, these \"POI\"s are prominent local entities that don't easily fit in another category, such as \"Empire State Building\" or \"Eiffel Tower\".\n* `political` indicates a political entity. Usually, this type indicates a polygon of some civil administration.\n* `postal_code` indicates a postal code as used to address postal mail within the country.\n* `premise` indicates a named location, usually a building or collection of buildings with a common name\n* `route` indicates a named route (such as \"US 101\").\n* `street_address` indicates a precise street address.\n* `sublocality` indicates a first-order civil entity below a locality. For some locations may receive one of the additional types: `sublocality_level_1` to `sublocality_level_5`. Each sublocality level is a civil entity. Larger numbers indicate a smaller geographic area.\n* `subpremise` indicates a first-order entity below a named location, usually a singular building within a collection of buildings with a common name",
															"key": "result_type",
															"value": "street_address|administrative_area_level_5"
														},
														{
															"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
															"key": "language",
															"value": "en"
														},
														{
															"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
															"key": "region",
															"value": "en"
														}
													]
												},
												"description": "The Geocoding API is a service that provides geocoding and reverse geocoding of addresses.\n\n**Geocoding** is the process of converting addresses (like a street address) into geographic coordinates (like latitude and longitude), which you can use to place markers on a map, or position the map.\n\n**Reverse geocoding** is the process of converting geographic coordinates into a human-readable address.\n\nYou can also use the Geocoding API to find the address for a given place ID.\n\nTo see countries currently supported by the Google Maps Platform Geocoding API, please consult the [Google Maps coverage data](https://developers.google.com/maps/coverage). The accuracy of geocoded locations may vary per country, so you should consider using the returned `location_type` field to determine if a good enough match has been found for the purposes of your application. Please note that the availability of geocoding data depends on our contracts with data providers, so it is subject to change."
											},
											"response": [
												{
													"id": "822315ab-f20b-4472-b624-16aef7f14e28",
													"name": "200 OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/geocode/json?address=<string>&bounds=<string>&components=<string>|<string>&latlng=<string>&location_type=ROOFTOP|GEOMETRIC_CENTER&place_id=<string>&result_type=street_address|administrative_area_level_5&language=en&region=en&key=<API Key>",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"geocode",
																"json"
															],
															"query": [
																{
																	"description": "The street address or plus code that you want to geocode. Specify addresses in accordance with the format used by the national postal service of the country concerned. Additional address elements such as business names and unit, suite or floor numbers should be avoided. Street address elements should be delimited by spaces (shown here as url-escaped to `%20`):\n\n```\naddress=24%20Sussex%20Drive%20Ottawa%20ON\n```\n\nFormat plus codes as shown here (plus signs are url-escaped to `%2B` and spaces are url-escaped to `%20`):\n- global code is a 4 character area code and 6 character or longer local code (`849VCWC8+R9` is `849VCWC8%2BR9`).\n- compound code is a 6 character or longer local code with an explicit location (`CWC8+R9 Mountain View, CA, USA` is `CWC8%2BR9%20Mountain%20View%20CA%20USA`).\n\n<div class=\"note\">Note: At least one of `address` or `components` is required.</div>",
																	"key": "address",
																	"value": "<string>"
																},
																{
																	"description": "The bounding box of the viewport within which to bias geocode results more prominently. This parameter will only influence, not fully restrict, results from the geocoder.",
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"description": "A components filter with elements separated by a pipe (|). The components filter is also accepted as an optional parameter if an address is provided. Each element in the components filter consists of a `component:value` pair, and fully restricts the results from the geocoder.\n\nThe components that can be filtered include:\n\n* `postal_code` matches `postal_code` and `postal_code_prefix`.\n* `country` matches a country name or a two letter ISO 3166-1 country code. The API follows the ISO standard for defining countries, and the filtering works best when using the corresponding ISO code of the country.\n  <aside class=\"note\"><strong>Note</strong>: If you receive unexpected results with a country code, verify that you are using a code which includes the countries, dependent territories, and special areas of geographical interest you intend. You can find code information at Wikipedia: List of ISO 3166 country codes or the ISO Online Browsing Platform.</aside>\n  \nThe following components may be used to influence results, but will not be enforced:\n\n* `route` matches the long or short name of a route.\n* `locality` matches against `locality` and `sublocality` types.\n* `administrative_area` matches all the `administrative_area` levels.\n  \nNotes about component filtering:\n\n* Do not repeat these component filters in requests, or the API will return `INVALID_REQUEST`: \n  * `country`\n  * `postal_code`\n  * `route`\n* If the request contains repeated component filters, the API evaluates those filters as an AND, not an OR.\n* Results are consistent with Google Maps, which occasionally yields unexpected `ZERO_RESULTS` responses. Using Place Autocomplete may provide better results in some use cases. To learn more, see [this FAQ](https://developers..google.com/maps/documentation/geocoding/faq#trbl_component_filtering).\n* For each address component, either specify it in the address parameter or in a components filter, but not both. Specifying the same values in both may result in `ZERO_RESULTS`.\n\n<div class=\"note\">Note: At least one of `address` or `components` is required.</div>",
																	"key": "components",
																	"value": "<string>|<string>"
																},
																{
																	"description": "The street address that you want to geocode, in the format used by the national postal service of the country concerned. Additional address elements such as business names and unit, suite or floor numbers should be avoided.",
																	"key": "latlng",
																	"value": "<string>"
																},
																{
																	"description": "A filter of one or more location types, separated by a pipe (`|`). If the parameter contains multiple location types, the API returns all addresses that match any of the types. A note about processing: The `location_type` parameter does not restrict the search to the specified location type(s). Rather, the `location_type` acts as a post-search filter: the API fetches all results for the specified latlng, then discards those results that do not match the specified location type(s). The following values are supported:\n* `APPROXIMATE` returns only the addresses that are characterized as approximate.\n* `GEOMETRIC_CENTER` returns only geometric centers of a location such as a polyline (for example, a street) or polygon (region).\n* `RANGE_INTERPOLATED` returns only the addresses that reflect an approximation (usually on a road) interpolated between two precise points (such as intersections). An interpolated range generally indicates that rooftop geocodes are unavailable for a street address.\n* `ROOFTOP` returns only the addresses for which Google has location information accurate down to street address precision.",
																	"key": "location_type",
																	"value": "ROOFTOP|GEOMETRIC_CENTER"
																},
																{
																	"description": "A textual identifier that uniquely identifies a place, returned from a [Place Search](https://developers.google.com/maps/documentation/places/web-service/search).\nFor more information about place IDs, see the [place ID overview](https://developers.google.com/maps/documentation/places/web-service/place-id).\n",
																	"key": "place_id",
																	"value": "<string>"
																},
																{
																	"description": "A filter of one or more address types, separated by a pipe (|). If the parameter contains multiple address types, the API returns all addresses that match any of the types. A note about processing: The `result_type` parameter does not restrict the search to the specified address type(s). Rather, the `result_type` acts as a post-search filter: the API fetches all results for the specified `latlng`, then discards those results that do not match the specified address type(s).The following values are supported:\n* `administrative_area_level_1` indicates a first-order civil entity below the country level. Within the United States, these administrative levels are states. Not all nations exhibit these administrative levels. In most cases, administrative_area_level_1   * `short` names will closely match ISO 3166-2 subdivisions and other widely circulated lists; however this is not guaranteed as our geocoding results are based on a variety of signals and location data.\n* `administrative_area_level_2` indicates a second-order civil entity below the country level. Within the United States, these administrative levels are counties. Not all nations exhibit these administrative levels.\n* `administrative_area_level_3` indicates a third-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels.\n* `administrative_area_level_4` indicates a fourth-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels.\n* `administrative_area_level_5` indicates a fifth-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels.\n* `airport` indicates an airport.\n* `colloquial_area` indicates a commonly-used alternative name for the entity.\n* `country` indicates the national political entity, and is typically the highest order type returned by the Geocoder.\n* `intersection` indicates a major intersection, usually of two major roads.\n* `locality` indicates an incorporated city or town political entity.\n* `natural_feature` indicates a prominent natural feature.\n* `neighborhood` indicates a named neighborhood\n* `park` indicates a named park.\n* `plus_code` indicates an encoded location reference, derived from latitude and longitude. Plus codes can be used as a replacement for street addresses in places where they do not exist (where buildings are not numbered or streets are not named). See [https://plus.codes/](https://plus.codes/) for details.\n* `point_of_interest` indicates a named point of interest. Typically, these \"POI\"s are prominent local entities that don't easily fit in another category, such as \"Empire State Building\" or \"Eiffel Tower\".\n* `political` indicates a political entity. Usually, this type indicates a polygon of some civil administration.\n* `postal_code` indicates a postal code as used to address postal mail within the country.\n* `premise` indicates a named location, usually a building or collection of buildings with a common name\n* `route` indicates a named route (such as \"US 101\").\n* `street_address` indicates a precise street address.\n* `sublocality` indicates a first-order civil entity below a locality. For some locations may receive one of the additional types: `sublocality_level_1` to `sublocality_level_5`. Each sublocality level is a civil entity. Larger numbers indicate a smaller geographic area.\n* `subpremise` indicates a first-order entity below a named location, usually a singular building within a collection of buildings with a common name",
																	"key": "result_type",
																	"value": "street_address|administrative_area_level_5"
																},
																{
																	"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																	"key": "language",
																	"value": "en"
																},
																{
																	"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
																	"key": "region",
																	"value": "en"
																},
																{
																	"description": "Added as a part of security scheme: apikey",
																	"key": "key",
																	"value": "<API Key>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"OK\",\n  \"results\": [\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"<string>\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        },\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"southwest\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          }\n        },\n        \"location_type\": \"RANGE_INTERPOLATED\",\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"southwest\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          }\n        }\n      },\n      \"place_id\": \"<string>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"plus_code\": {\n        \"global_code\": \"<string>\",\n        \"compound_code\": \"<string>\"\n      },\n      \"postcode_localities\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"partial_match\": \"<boolean>\"\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"<string>\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        },\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"southwest\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          }\n        },\n        \"location_type\": \"RANGE_INTERPOLATED\",\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"southwest\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          }\n        }\n      },\n      \"place_id\": \"<string>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"plus_code\": {\n        \"global_code\": \"<string>\",\n        \"compound_code\": \"<string>\"\n      },\n      \"postcode_localities\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"partial_match\": \"<boolean>\"\n    }\n  ],\n  \"plus_code\": {\n    \"global_code\": \"<string>\",\n    \"compound_code\": \"<string>\"\n  },\n  \"error_message\": \"<string>\"\n}"
												}
											]
										}
									],
									"id": "e7fdc7d7-ea5f-447a-9685-e66ef8ba308f"
								}
							],
							"id": "b91b697a-6dbd-41fd-be13-92a8ddc3a98d"
						},
						{
							"name": "timezone",
							"item": [
								{
									"name": "json",
									"item": [
										{
											"name": "The Time Zone API provides a simple interface to request the time zone for locations on the surface of the earth, as well as the time offset from UTC for each of those locations. You request the time zone information for a specific latitude/longitude pair",
											"id": "6eca7cc6-6523-4651-b7ce-8eea5b9d2801",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://maps.googleapis.com/maps/api/timezone/json?language=en&location=<string>&timestamp=<number>",
													"protocol": "https",
													"host": [
														"maps",
														"googleapis",
														"com"
													],
													"path": [
														"maps",
														"api",
														"timezone",
														"json"
													],
													"query": [
														{
															"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
															"key": "language",
															"value": "en"
														},
														{
															"description": "(Required) A comma-separated latitude,longitude tuple, `location=39.6034810,-119.6822510`, representing the location to look up.\n",
															"key": "location",
															"value": "<string>"
														},
														{
															"description": "(Required) The desired time as seconds since midnight, January 1, 1970 UTC. The Time Zone API uses the `timestamp` to determine whether or not Daylight Savings should be applied, based on the time zone of the `location`. \n\nNote that the API does not take historical time zones into account. That is, if you specify a past timestamp, the API does not take into account the possibility that the location was previously in a different time zone.\n",
															"key": "timestamp",
															"value": "<number>"
														}
													]
												},
												"description": "The Time Zone API provides a simple interface to request the time zone for locations on the surface of the earth, as well as the time offset from UTC for each of those locations. You request the time zone information for a specific latitude/longitude pair and date. The API returns the name of that time zone, the time offset from UTC, and the daylight savings offset.\n"
											},
											"response": [
												{
													"id": "fbcf9949-c09d-4d85-97e6-8919b1cd3697",
													"name": "200 OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/timezone/json?language=en&location=<string>&timestamp=<number>&key=<API Key>",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"timezone",
																"json"
															],
															"query": [
																{
																	"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																	"key": "language",
																	"value": "en"
																},
																{
																	"description": "(Required) A comma-separated latitude,longitude tuple, `location=39.6034810,-119.6822510`, representing the location to look up.\n",
																	"key": "location",
																	"value": "<string>"
																},
																{
																	"description": "(Required) The desired time as seconds since midnight, January 1, 1970 UTC. The Time Zone API uses the `timestamp` to determine whether or not Daylight Savings should be applied, based on the time zone of the `location`. \n\nNote that the API does not take historical time zones into account. That is, if you specify a past timestamp, the API does not take into account the possibility that the location was previously in a different time zone.\n",
																	"key": "timestamp",
																	"value": "<number>"
																},
																{
																	"description": "Added as a part of security scheme: apikey",
																	"key": "key",
																	"value": "<API Key>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"INVALID_REQUEST\",\n  \"dstOffset\": \"<number>\",\n  \"rawOffset\": \"<number>\",\n  \"timeZoneId\": \"<string>\",\n  \"timeZoneName\": \"<string>\",\n  \"errorMessage\": \"<string>\"\n}"
												}
											]
										}
									],
									"id": "63881ded-e46b-4b12-b0fc-d828aa0364ca"
								}
							],
							"id": "08037d85-67c8-441c-965b-8ae04ac42070"
						},
						{
							"name": "distancematrix",
							"item": [
								{
									"name": "json",
									"item": [
										{
											"name": "The Distance Matrix API is a service that provides travel distance and time for a matrix of origins and destinations. The API returns information based on the recommended route between start and end points, as calculated by the Google Maps API, and consis",
											"id": "146964fa-20ee-4b95-9bb2-0e7b22e085c8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://maps.googleapis.com/maps/api/distancematrix/json?arrival_time=<number>&departure_time=<number>&avoid=<string>&destinations=<string>|<string>&origins=<string>|<string>&units=metric&language=en&mode=walking&region=en&traffic_model=best_guess&transit_mode=<string>&transit_routing_preference=fewer_transfers",
													"protocol": "https",
													"host": [
														"maps",
														"googleapis",
														"com"
													],
													"path": [
														"maps",
														"api",
														"distancematrix",
														"json"
													],
													"query": [
														{
															"description": "Specifies the desired time of arrival for transit directions, in seconds since midnight, January 1, 1970 UTC. You can specify either `departure_time` or `arrival_time`, but not both. Note that `arrival_time` must be specified as an integer.\n",
															"key": "arrival_time",
															"value": "<number>"
														},
														{
															"description": "Specifies the desired time of departure. You can specify the time as an integer in seconds since midnight, January 1, 1970 UTC. If a `departure_time` later than 9999-12-31T23:59:59.999999999Z is specified, the API will fall back the `departure_time` to 9999-12-31T23:59:59.999999999Z. Alternatively, you can specify a value of now, which sets the departure time to the current time (correct to the nearest second). The departure time may be specified in two cases:\n* For requests where the travel mode is transit: You can optionally specify one of `departure_time` or `arrival_time`. If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time).\n* For requests where the travel mode is driving: You can specify the `departure_time` to receive a route and trip duration (response field: duration_in_traffic) that take traffic conditions into account. The `departure_time` must be set to the current time or some time in the future. It cannot be in the past.\n\n<div class=\"note\">Note: If departure time is not specified, choice of route and duration are based on road network and average time-independent traffic conditions. Results for a given request may vary over time due to changes in the road network, updated average traffic conditions, and the distributed nature of the service. Results may also vary between nearly-equivalent routes at any time or frequency.</div>\n<div class=\"note\">Note: Distance Matrix requests specifying `departure_time` when `mode=driving` are limited to a maximum of 100 elements per request. The number of origins times the number of destinations defines the number of elements.</div>\n",
															"key": "departure_time",
															"value": "<number>"
														},
														{
															"description": "Distances may be calculated that adhere to certain restrictions. Restrictions are indicated by use of the avoid parameter, and an argument to that parameter indicating the restriction to avoid. The following restrictions are supported:\n\n* `tolls` indicates that the calculated route should avoid toll roads/bridges.\n* `highways` indicates that the calculated route should avoid highways.\n* `ferries` indicates that the calculated route should avoid ferries.\n* `indoor` indicates that the calculated route should avoid indoor steps for walking and transit directions.\n\n<div class=\"note\">Note: The addition of restrictions does not preclude routes that include the restricted feature; it biases the result to more favorable routes.</div>\n",
															"key": "avoid",
															"value": "<string>"
														},
														{
															"description": "(Required) One or more locations to use as the finishing point for calculating travel distance and time. The options for the destinations parameter are the same as for the origins parameter.",
															"key": "destinations",
															"value": "<string>|<string>"
														},
														{
															"description": "(Required) The starting point for calculating travel distance and time. You can supply one or more locations separated by the pipe character (|), in the form of a place ID, an address, or latitude/longitude coordinates:\n- **Place ID**: If you supply a place ID, you must prefix it with `place_id:`.\n- **Address**: If you pass an address, the service geocodes the string and converts it to a latitude/longitude coordinate to calculate distance. This coordinate may be different from that returned by the Geocoding API, for example a building entrance rather than its center.\n  <div class=\"note\">Note: using place IDs is preferred over using addresses or latitude/longitude coordinates. Using coordinates will always result in the point being snapped to the road nearest to those coordinates - which may not be an access point to the property, or even a road that will quickly or safely lead to the destination. Using the address will provide the distance to the center of the building, as opposed to an entrance to the building.</div>\n- **Coordinates**: If you pass latitude/longitude coordinates, they they will snap to the nearest road. Passing a place ID is preferred. If you do pass coordinates, ensure that no space exists between the latitude and longitude values.\n- **Plus codes** must be formatted as a global code or a compound code. Format plus codes as shown here (plus signs are url-escaped to %2B and spaces are url-escaped to %20):\n  - **global code** is a 4 character area code and 6 character or longer local code (`849VCWC8+R9` is encoded to `849VCWC8%2BR9`).\n  - **compound code** is a 6 character or longer local code with an explicit location (`CWC8+R9 Mountain View, CA, USA` is encoded to `CWC8%2BR9%20Mountain%20View%20CA%20USA`).\n- **Encoded Polyline** Alternatively, you can supply an encoded set of coordinates using the [Encoded Polyline Algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm). This is particularly useful if you have a large number of origin points, because the URL is significantly shorter when using an encoded polyline.\n  - Encoded polylines must be prefixed with `enc:` and followed by a colon `:`. For example: `origins=enc:gfo}EtohhU:`\n  - You can also include multiple encoded polylines, separated by the pipe character `|`. For example: \n    ```\n    origins=enc:wc~oAwquwMdlTxiKtqLyiK:|enc:c~vnAamswMvlTor@tjGi}L:|enc:udymA{~bxM:\n    ```\n",
															"key": "origins",
															"value": "<string>|<string>"
														},
														{
															"description": "Specifies the unit system to use when displaying results.\n\n<div class=\"note\">Note: this unit system setting only affects the text displayed within distance fields. The distance fields also contain values which are always expressed in meters.</div>\n",
															"key": "units",
															"value": "metric"
														},
														{
															"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
															"key": "language",
															"value": "en"
														},
														{
															"description": "For the calculation of distances and directions, you may specify the transportation mode to use. By default, `DRIVING` mode is used. By default, directions are calculated as driving directions. The following travel modes are supported:\n\n* `driving` (default) indicates standard driving directions or distance using the road network.\n* `walking` requests walking directions or distance via pedestrian paths & sidewalks (where available).\n* `bicycling` requests bicycling directions or distance via bicycle paths & preferred streets (where available).\n* `transit` requests directions or distance via public transit routes (where available). If you set the mode to transit, you can optionally specify either a `departure_time` or an `arrival_time`. If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time). You can also optionally include a `transit_mode` and/or a `transit_routing_preference`.\n\n<div class=\"note\">Note: Both walking and bicycling directions may sometimes not include clear pedestrian or bicycling paths, so these directions will return warnings in the returned result which you must display to the user.</div>\n",
															"key": "mode",
															"value": "walking"
														},
														{
															"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
															"key": "region",
															"value": "en"
														},
														{
															"description": "Specifies the assumptions to use when calculating time in traffic. This setting affects the value returned in the duration_in_traffic field in the response, which contains the predicted time in traffic based on historical averages. The `traffic_model` parameter may only be specified for driving directions where the request includes a `departure_time`. The available values for this parameter are:\n* `best_guess` (default) indicates that the returned duration_in_traffic should be the best estimate of travel time given what is known about both historical traffic conditions and live traffic. Live traffic becomes more important the closer the `departure_time` is to now.\n* `pessimistic` indicates that the returned duration_in_traffic should be longer than the actual travel time on most days, though occasional days with particularly bad traffic conditions may exceed this value.\n* `optimistic` indicates that the returned duration_in_traffic should be shorter than the actual travel time on most days, though occasional days with particularly good traffic conditions may be faster than this value.\nThe default value of `best_guess` will give the most useful predictions for the vast majority of use cases. It is possible the `best_guess` travel time prediction may be shorter than `optimistic`, or alternatively, longer than `pessimistic`, due to the way the `best_guess` prediction model integrates live traffic information.\n",
															"key": "traffic_model",
															"value": "best_guess"
														},
														{
															"description": "Specifies one or more preferred modes of transit. This parameter may only be specified for transit directions. The parameter supports the following arguments:\n* `bus` indicates that the calculated route should prefer travel by bus.\n* `subway` indicates that the calculated route should prefer travel by subway.\n* `train` indicates that the calculated route should prefer travel by train.\n* `tram` indicates that the calculated route should prefer travel by tram and light rail.\n* `rail` indicates that the calculated route should prefer travel by train, tram, light rail, and subway. This is equivalent to `transit_mode=train|tram|subway`.\n",
															"key": "transit_mode",
															"value": "<string>"
														},
														{
															"description": "Specifies preferences for transit routes. Using this parameter, you can bias the options returned, rather than accepting the default best route chosen by the API. This parameter may only be specified for transit directions. The parameter supports the following arguments:\n* `less_walking` indicates that the calculated route should prefer limited amounts of walking.\n* `fewer_transfers` indicates that the calculated route should prefer a limited number of transfers.\n",
															"key": "transit_routing_preference",
															"value": "fewer_transfers"
														}
													]
												},
												"description": "The Distance Matrix API is a service that provides travel distance and time for a matrix of origins and destinations. The API returns information based on the recommended route between start and end points, as calculated by the Google Maps API, and consists of rows containing duration and distance values for each pair."
											},
											"response": [
												{
													"id": "4fcfcbfd-27c9-4267-83c3-ece609807647",
													"name": "200 OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/distancematrix/json?arrival_time=<number>&departure_time=<number>&avoid=<string>&destinations=<string>|<string>&origins=<string>|<string>&units=metric&language=en&mode=walking&region=en&traffic_model=best_guess&transit_mode=<string>&transit_routing_preference=fewer_transfers&key=<API Key>",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"distancematrix",
																"json"
															],
															"query": [
																{
																	"description": "Specifies the desired time of arrival for transit directions, in seconds since midnight, January 1, 1970 UTC. You can specify either `departure_time` or `arrival_time`, but not both. Note that `arrival_time` must be specified as an integer.\n",
																	"key": "arrival_time",
																	"value": "<number>"
																},
																{
																	"description": "Specifies the desired time of departure. You can specify the time as an integer in seconds since midnight, January 1, 1970 UTC. If a `departure_time` later than 9999-12-31T23:59:59.999999999Z is specified, the API will fall back the `departure_time` to 9999-12-31T23:59:59.999999999Z. Alternatively, you can specify a value of now, which sets the departure time to the current time (correct to the nearest second). The departure time may be specified in two cases:\n* For requests where the travel mode is transit: You can optionally specify one of `departure_time` or `arrival_time`. If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time).\n* For requests where the travel mode is driving: You can specify the `departure_time` to receive a route and trip duration (response field: duration_in_traffic) that take traffic conditions into account. The `departure_time` must be set to the current time or some time in the future. It cannot be in the past.\n\n<div class=\"note\">Note: If departure time is not specified, choice of route and duration are based on road network and average time-independent traffic conditions. Results for a given request may vary over time due to changes in the road network, updated average traffic conditions, and the distributed nature of the service. Results may also vary between nearly-equivalent routes at any time or frequency.</div>\n<div class=\"note\">Note: Distance Matrix requests specifying `departure_time` when `mode=driving` are limited to a maximum of 100 elements per request. The number of origins times the number of destinations defines the number of elements.</div>\n",
																	"key": "departure_time",
																	"value": "<number>"
																},
																{
																	"description": "Distances may be calculated that adhere to certain restrictions. Restrictions are indicated by use of the avoid parameter, and an argument to that parameter indicating the restriction to avoid. The following restrictions are supported:\n\n* `tolls` indicates that the calculated route should avoid toll roads/bridges.\n* `highways` indicates that the calculated route should avoid highways.\n* `ferries` indicates that the calculated route should avoid ferries.\n* `indoor` indicates that the calculated route should avoid indoor steps for walking and transit directions.\n\n<div class=\"note\">Note: The addition of restrictions does not preclude routes that include the restricted feature; it biases the result to more favorable routes.</div>\n",
																	"key": "avoid",
																	"value": "<string>"
																},
																{
																	"description": "(Required) One or more locations to use as the finishing point for calculating travel distance and time. The options for the destinations parameter are the same as for the origins parameter.",
																	"key": "destinations",
																	"value": "<string>|<string>"
																},
																{
																	"description": "(Required) The starting point for calculating travel distance and time. You can supply one or more locations separated by the pipe character (|), in the form of a place ID, an address, or latitude/longitude coordinates:\n- **Place ID**: If you supply a place ID, you must prefix it with `place_id:`.\n- **Address**: If you pass an address, the service geocodes the string and converts it to a latitude/longitude coordinate to calculate distance. This coordinate may be different from that returned by the Geocoding API, for example a building entrance rather than its center.\n  <div class=\"note\">Note: using place IDs is preferred over using addresses or latitude/longitude coordinates. Using coordinates will always result in the point being snapped to the road nearest to those coordinates - which may not be an access point to the property, or even a road that will quickly or safely lead to the destination. Using the address will provide the distance to the center of the building, as opposed to an entrance to the building.</div>\n- **Coordinates**: If you pass latitude/longitude coordinates, they they will snap to the nearest road. Passing a place ID is preferred. If you do pass coordinates, ensure that no space exists between the latitude and longitude values.\n- **Plus codes** must be formatted as a global code or a compound code. Format plus codes as shown here (plus signs are url-escaped to %2B and spaces are url-escaped to %20):\n  - **global code** is a 4 character area code and 6 character or longer local code (`849VCWC8+R9` is encoded to `849VCWC8%2BR9`).\n  - **compound code** is a 6 character or longer local code with an explicit location (`CWC8+R9 Mountain View, CA, USA` is encoded to `CWC8%2BR9%20Mountain%20View%20CA%20USA`).\n- **Encoded Polyline** Alternatively, you can supply an encoded set of coordinates using the [Encoded Polyline Algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm). This is particularly useful if you have a large number of origin points, because the URL is significantly shorter when using an encoded polyline.\n  - Encoded polylines must be prefixed with `enc:` and followed by a colon `:`. For example: `origins=enc:gfo}EtohhU:`\n  - You can also include multiple encoded polylines, separated by the pipe character `|`. For example: \n    ```\n    origins=enc:wc~oAwquwMdlTxiKtqLyiK:|enc:c~vnAamswMvlTor@tjGi}L:|enc:udymA{~bxM:\n    ```\n",
																	"key": "origins",
																	"value": "<string>|<string>"
																},
																{
																	"description": "Specifies the unit system to use when displaying results.\n\n<div class=\"note\">Note: this unit system setting only affects the text displayed within distance fields. The distance fields also contain values which are always expressed in meters.</div>\n",
																	"key": "units",
																	"value": "metric"
																},
																{
																	"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																	"key": "language",
																	"value": "en"
																},
																{
																	"description": "For the calculation of distances and directions, you may specify the transportation mode to use. By default, `DRIVING` mode is used. By default, directions are calculated as driving directions. The following travel modes are supported:\n\n* `driving` (default) indicates standard driving directions or distance using the road network.\n* `walking` requests walking directions or distance via pedestrian paths & sidewalks (where available).\n* `bicycling` requests bicycling directions or distance via bicycle paths & preferred streets (where available).\n* `transit` requests directions or distance via public transit routes (where available). If you set the mode to transit, you can optionally specify either a `departure_time` or an `arrival_time`. If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time). You can also optionally include a `transit_mode` and/or a `transit_routing_preference`.\n\n<div class=\"note\">Note: Both walking and bicycling directions may sometimes not include clear pedestrian or bicycling paths, so these directions will return warnings in the returned result which you must display to the user.</div>\n",
																	"key": "mode",
																	"value": "walking"
																},
																{
																	"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
																	"key": "region",
																	"value": "en"
																},
																{
																	"description": "Specifies the assumptions to use when calculating time in traffic. This setting affects the value returned in the duration_in_traffic field in the response, which contains the predicted time in traffic based on historical averages. The `traffic_model` parameter may only be specified for driving directions where the request includes a `departure_time`. The available values for this parameter are:\n* `best_guess` (default) indicates that the returned duration_in_traffic should be the best estimate of travel time given what is known about both historical traffic conditions and live traffic. Live traffic becomes more important the closer the `departure_time` is to now.\n* `pessimistic` indicates that the returned duration_in_traffic should be longer than the actual travel time on most days, though occasional days with particularly bad traffic conditions may exceed this value.\n* `optimistic` indicates that the returned duration_in_traffic should be shorter than the actual travel time on most days, though occasional days with particularly good traffic conditions may be faster than this value.\nThe default value of `best_guess` will give the most useful predictions for the vast majority of use cases. It is possible the `best_guess` travel time prediction may be shorter than `optimistic`, or alternatively, longer than `pessimistic`, due to the way the `best_guess` prediction model integrates live traffic information.\n",
																	"key": "traffic_model",
																	"value": "best_guess"
																},
																{
																	"description": "Specifies one or more preferred modes of transit. This parameter may only be specified for transit directions. The parameter supports the following arguments:\n* `bus` indicates that the calculated route should prefer travel by bus.\n* `subway` indicates that the calculated route should prefer travel by subway.\n* `train` indicates that the calculated route should prefer travel by train.\n* `tram` indicates that the calculated route should prefer travel by tram and light rail.\n* `rail` indicates that the calculated route should prefer travel by train, tram, light rail, and subway. This is equivalent to `transit_mode=train|tram|subway`.\n",
																	"key": "transit_mode",
																	"value": "<string>"
																},
																{
																	"description": "Specifies preferences for transit routes. Using this parameter, you can bias the options returned, rather than accepting the default best route chosen by the API. This parameter may only be specified for transit directions. The parameter supports the following arguments:\n* `less_walking` indicates that the calculated route should prefer limited amounts of walking.\n* `fewer_transfers` indicates that the calculated route should prefer a limited number of transfers.\n",
																	"key": "transit_routing_preference",
																	"value": "fewer_transfers"
																},
																{
																	"description": "Added as a part of security scheme: apikey",
																	"key": "key",
																	"value": "<API Key>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"origin_addresses\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"destination_addresses\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"rows\": [\n    {\n      \"elements\": [\n        {\n          \"status\": \"OK\",\n          \"fare\": {\n            \"currency\": \"<string>\",\n            \"value\": \"<number>\",\n            \"text\": \"<string>\"\n          },\n          \"distance\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration_in_traffic\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          }\n        },\n        {\n          \"status\": \"MAX_ROUTE_LENGTH_EXCEEDED\",\n          \"fare\": {\n            \"currency\": \"<string>\",\n            \"value\": \"<number>\",\n            \"text\": \"<string>\"\n          },\n          \"distance\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration_in_traffic\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          }\n        }\n      ]\n    },\n    {\n      \"elements\": [\n        {\n          \"status\": \"NOT_FOUND\",\n          \"fare\": {\n            \"currency\": \"<string>\",\n            \"value\": \"<number>\",\n            \"text\": \"<string>\"\n          },\n          \"distance\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration_in_traffic\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          }\n        },\n        {\n          \"status\": \"OK\",\n          \"fare\": {\n            \"currency\": \"<string>\",\n            \"value\": \"<number>\",\n            \"text\": \"<string>\"\n          },\n          \"distance\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration_in_traffic\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          },\n          \"duration\": {\n            \"text\": \"<string>\",\n            \"value\": \"<number>\"\n          }\n        }\n      ]\n    }\n  ],\n  \"status\": \"MAX_ELEMENTS_EXCEEDED\",\n  \"error_message\": \"<string>\"\n}"
												}
											]
										}
									],
									"id": "e942cbe9-ac37-4b46-8527-b867b058437b"
								}
							],
							"id": "26df3491-75ef-4118-a77a-b968bac25b0a"
						},
						{
							"name": "place",
							"item": [
								{
									"name": "details",
									"item": [
										{
											"name": "json",
											"item": [
												{
													"name": "The Places API is a service that returns information about places using HTTP requests. Places are defined within this API as establishments, geographic locations, or prominent points of interest.",
													"id": "cbb71442-be63-43fd-aa76-57861f945034",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/place/details/json?place_id=<string>&fields=<string>&sessiontoken=<string>&language=en&region=en&reviews_sort=<string>&reviews_no_translations=<boolean>",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"place",
																"details",
																"json"
															],
															"query": [
																{
																	"description": "(Required) A textual identifier that uniquely identifies a place, returned from a [Place Search](https://developers.google.com/maps/documentation/places/web-service/search).\nFor more information about place IDs, see the [place ID overview](https://developers.google.com/maps/documentation/places/web-service/place-id).\n",
																	"key": "place_id",
																	"value": "<string>"
																},
																{
																	"description": "\n<div class=\"caution\"> Caution: Place Search requests and Place Details requests do not return the same fields. Place Search requests return a subset of the fields that are returned by Place Details requests. If the field you want is not returned by Place Search, you can use Place Search to get a <code>place_id</code>, then use that Place ID to make a Place Details request. For more information on the fields that are unavailable in a Place Search request, see <a href=\"https://developers.google.com/maps/documentation/places/web-service/place-data-fields#places-api-fields-support\">Places API fields support</a>.</div>\n\nUse the fields parameter to specify a comma-separated list of place data types to return. For example: `fields=formatted_address,name,geometry`. Use a forward slash when specifying compound values. For example: `opening_hours/open_now`.\n\nFields are divided into three billing categories: Basic, Contact, and Atmosphere. Basic fields are billed at base rate, and incur no additional charges. Contact and Atmosphere fields are billed at a higher rate. See the [pricing sheet](https://developers.google.com/maps/documentation/places/web-service/usage-and-billing/) for more information. Attributions, `html_attributions`, are always returned with every call, regardless of whether the field has been requested.\n\n**Basic**\n\nThe Basic category includes the following fields: `address_components`, `adr_address`, `business_status`, `formatted_address`, `geometry`, `icon`, `icon_mask_base_uri`, `icon_background_color`, `name`, `permanently_closed` ([deprecated](https://developers.google.com/maps/deprecations)), `photo`, `place_id`, `plus_code`, `type`, `url`, `utc_offset`, `vicinity`, `wheelchair_accessible_entrance`.\n\n**Contact**\n\nThe Contact category includes the following fields: `current_opening_hours`, `formatted_phone_number`, `international_phone_number`, `opening_hours`, `secondary_opening_hours`, `website`\n\n**Atmosphere**\n\nThe Atmosphere category includes the following fields: `curbside_pickup`, `delivery`, `dine_in`, `editorial_summary`, `price_level`, `rating`, `reservable`, `reviews`, `serves_beer`, `serves_breakfast`, `serves_brunch`, `serves_dinner`, `serves_lunch`, `serves_vegetarian_food`, `serves_wine`, `takeout`, `user_ratings_total`.\n",
																	"key": "fields",
																	"value": "<string>"
																},
																{
																	"description": "A random string which identifies an autocomplete [session](https://developers.google.com/maps/documentation/places/web-service/details#session_tokens) for billing purposes.\n\nThe session begins when the user starts typing a query, and concludes when they select a place and a call to Place Details is made. Each session can have multiple queries, followed by one place selection. The API key(s) used for each request within a session must belong to the same Google Cloud Console project. Once a session has concluded, the token is no longer valid; your app must generate a fresh token for each session. If the `sessiontoken` parameter is omitted, or if you reuse a session token, the session is charged as if no session token was provided (each request is billed separately).\n\nWe recommend the following guidelines:\n\n- Use session tokens for all autocomplete sessions.\n- Generate a fresh token for each session. Using a version 4 UUID is recommended.\n- Ensure that the API key(s) used for all Place Autocomplete and Place Details requests within a session belong to the same Cloud Console project.\n- Be sure to pass a unique session token for each new session. Using the same token for more than one session will result in each request being billed individually.\n",
																	"key": "sessiontoken",
																	"value": "<string>"
																},
																{
																	"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																	"key": "language",
																	"value": "en"
																},
																{
																	"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
																	"key": "region",
																	"value": "en"
																},
																{
																	"description": "The sorting method to use when returning reviews. Can be set to `most_relevant` (default) or `newest`.\n\n- For `most_relevant` (default), reviews are sorted by relevance; the service will bias the results to return reviews originally written in the preferred language.\n- For `newest`, reviews are sorted in chronological order; the preferred language does not affect the sort order.\n\nGoogle recommends that you display how the reviews are being sorted to the end user.\n",
																	"key": "reviews_sort",
																	"value": "<string>"
																},
																{
																	"description": "\nSpecify `reviews_no_translations=true` to disable translation of reviews; specify `reviews_no_translations=false` to enable translation of reviews. Reviews are returned in their original language.\n\nIf omitted, or passed with no value, translation of reviews is enabled. If the `language` parameter was specified in the request, use the specified language as the preferred language for translation. If `language` is omitted, the API attempts to use the `Accept-Language` header as the preferred language.\n",
																	"key": "reviews_no_translations",
																	"value": "<boolean>"
																}
															]
														},
														"description": "The Places API is a service that returns information about places using HTTP requests. Places are defined within this API as establishments, geographic locations, or prominent points of interest."
													},
													"response": [
														{
															"id": "50ee0296-c9f6-45d2-a041-0d0fa3b9082d",
															"name": "200 OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "https://maps.googleapis.com/maps/api/place/details/json?place_id=<string>&fields=<string>&sessiontoken=<string>&language=en&region=en&reviews_sort=<string>&reviews_no_translations=<boolean>&key=<API Key>",
																	"protocol": "https",
																	"host": [
																		"maps",
																		"googleapis",
																		"com"
																	],
																	"path": [
																		"maps",
																		"api",
																		"place",
																		"details",
																		"json"
																	],
																	"query": [
																		{
																			"description": "(Required) A textual identifier that uniquely identifies a place, returned from a [Place Search](https://developers.google.com/maps/documentation/places/web-service/search).\nFor more information about place IDs, see the [place ID overview](https://developers.google.com/maps/documentation/places/web-service/place-id).\n",
																			"key": "place_id",
																			"value": "<string>"
																		},
																		{
																			"description": "\n<div class=\"caution\"> Caution: Place Search requests and Place Details requests do not return the same fields. Place Search requests return a subset of the fields that are returned by Place Details requests. If the field you want is not returned by Place Search, you can use Place Search to get a <code>place_id</code>, then use that Place ID to make a Place Details request. For more information on the fields that are unavailable in a Place Search request, see <a href=\"https://developers.google.com/maps/documentation/places/web-service/place-data-fields#places-api-fields-support\">Places API fields support</a>.</div>\n\nUse the fields parameter to specify a comma-separated list of place data types to return. For example: `fields=formatted_address,name,geometry`. Use a forward slash when specifying compound values. For example: `opening_hours/open_now`.\n\nFields are divided into three billing categories: Basic, Contact, and Atmosphere. Basic fields are billed at base rate, and incur no additional charges. Contact and Atmosphere fields are billed at a higher rate. See the [pricing sheet](https://developers.google.com/maps/documentation/places/web-service/usage-and-billing/) for more information. Attributions, `html_attributions`, are always returned with every call, regardless of whether the field has been requested.\n\n**Basic**\n\nThe Basic category includes the following fields: `address_components`, `adr_address`, `business_status`, `formatted_address`, `geometry`, `icon`, `icon_mask_base_uri`, `icon_background_color`, `name`, `permanently_closed` ([deprecated](https://developers.google.com/maps/deprecations)), `photo`, `place_id`, `plus_code`, `type`, `url`, `utc_offset`, `vicinity`, `wheelchair_accessible_entrance`.\n\n**Contact**\n\nThe Contact category includes the following fields: `current_opening_hours`, `formatted_phone_number`, `international_phone_number`, `opening_hours`, `secondary_opening_hours`, `website`\n\n**Atmosphere**\n\nThe Atmosphere category includes the following fields: `curbside_pickup`, `delivery`, `dine_in`, `editorial_summary`, `price_level`, `rating`, `reservable`, `reviews`, `serves_beer`, `serves_breakfast`, `serves_brunch`, `serves_dinner`, `serves_lunch`, `serves_vegetarian_food`, `serves_wine`, `takeout`, `user_ratings_total`.\n",
																			"key": "fields",
																			"value": "<string>"
																		},
																		{
																			"description": "A random string which identifies an autocomplete [session](https://developers.google.com/maps/documentation/places/web-service/details#session_tokens) for billing purposes.\n\nThe session begins when the user starts typing a query, and concludes when they select a place and a call to Place Details is made. Each session can have multiple queries, followed by one place selection. The API key(s) used for each request within a session must belong to the same Google Cloud Console project. Once a session has concluded, the token is no longer valid; your app must generate a fresh token for each session. If the `sessiontoken` parameter is omitted, or if you reuse a session token, the session is charged as if no session token was provided (each request is billed separately).\n\nWe recommend the following guidelines:\n\n- Use session tokens for all autocomplete sessions.\n- Generate a fresh token for each session. Using a version 4 UUID is recommended.\n- Ensure that the API key(s) used for all Place Autocomplete and Place Details requests within a session belong to the same Cloud Console project.\n- Be sure to pass a unique session token for each new session. Using the same token for more than one session will result in each request being billed individually.\n",
																			"key": "sessiontoken",
																			"value": "<string>"
																		},
																		{
																			"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																			"key": "language",
																			"value": "en"
																		},
																		{
																			"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
																			"key": "region",
																			"value": "en"
																		},
																		{
																			"description": "The sorting method to use when returning reviews. Can be set to `most_relevant` (default) or `newest`.\n\n- For `most_relevant` (default), reviews are sorted by relevance; the service will bias the results to return reviews originally written in the preferred language.\n- For `newest`, reviews are sorted in chronological order; the preferred language does not affect the sort order.\n\nGoogle recommends that you display how the reviews are being sorted to the end user.\n",
																			"key": "reviews_sort",
																			"value": "<string>"
																		},
																		{
																			"description": "\nSpecify `reviews_no_translations=true` to disable translation of reviews; specify `reviews_no_translations=false` to enable translation of reviews. Reviews are returned in their original language.\n\nIf omitted, or passed with no value, translation of reviews is enabled. If the `language` parameter was specified in the request, use the specified language as the preferred language for translation. If `language` is omitted, the API attempts to use the `Accept-Language` header as the preferred language.\n",
																			"key": "reviews_no_translations",
																			"value": "<boolean>"
																		},
																		{
																			"description": "Added as a part of security scheme: apikey",
																			"key": "key",
																			"value": "<API Key>"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"html_attributions\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"result\": {\n    \"address_components\": [\n      {\n        \"long_name\": \"<string>\",\n        \"short_name\": \"<string>\",\n        \"types\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"long_name\": \"<string>\",\n        \"short_name\": \"<string>\",\n        \"types\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"adr_address\": \"<string>\",\n    \"business_status\": \"CLOSED_PERMANENTLY\",\n    \"curbside_pickup\": \"<boolean>\",\n    \"current_opening_hours\": {\n      \"open_now\": \"<boolean>\",\n      \"periods\": [\n        {\n          \"open\": {\n            \"day\": \"<number>\",\n            \"time\": \"<string>\",\n            \"date\": \"<string>\",\n            \"truncated\": \"<boolean>\"\n          },\n          \"close\": {\n            \"day\": \"<number>\",\n            \"time\": \"<string>\",\n            \"date\": \"<string>\",\n            \"truncated\": \"<boolean>\"\n          }\n        },\n        {\n          \"open\": {\n            \"day\": \"<number>\",\n            \"time\": \"<string>\",\n            \"date\": \"<string>\",\n            \"truncated\": \"<boolean>\"\n          },\n          \"close\": {\n            \"day\": \"<number>\",\n            \"time\": \"<string>\",\n            \"date\": \"<string>\",\n            \"truncated\": \"<boolean>\"\n          }\n        }\n      ],\n      \"special_days\": [\n        {\n          \"date\": \"<string>\",\n          \"exceptional_hours\": \"<boolean>\"\n        },\n        {\n          \"date\": \"<string>\",\n          \"exceptional_hours\": \"<boolean>\"\n        }\n      ],\n      \"type\": \"<string>\",\n      \"weekday_text\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    \"delivery\": \"<boolean>\",\n    \"dine_in\": \"<boolean>\",\n    \"editorial_summary\": {\n      \"overview\": \"<string>\",\n      \"language\": \"<string>\"\n    },\n    \"formatted_address\": \"<string>\",\n    \"formatted_phone_number\": \"<string>\",\n    \"geometry\": {\n      \"location\": {\n        \"lat\": \"<number>\",\n        \"lng\": \"<number>\"\n      },\n      \"viewport\": {\n        \"northeast\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        },\n        \"southwest\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        }\n      }\n    },\n    \"icon\": \"<string>\",\n    \"icon_background_color\": \"<string>\",\n    \"icon_mask_base_uri\": \"<string>\",\n    \"international_phone_number\": \"<string>\",\n    \"name\": \"<string>\",\n    \"opening_hours\": {\n      \"open_now\": \"<boolean>\",\n      \"periods\": [\n        {\n          \"open\": {\n            \"day\": \"<number>\",\n            \"time\": \"<string>\",\n            \"date\": \"<string>\",\n            \"truncated\": \"<boolean>\"\n          },\n          \"close\": {\n            \"day\": \"<number>\",\n            \"time\": \"<string>\",\n            \"date\": \"<string>\",\n            \"truncated\": \"<boolean>\"\n          }\n        },\n        {\n          \"open\": {\n            \"day\": \"<number>\",\n            \"time\": \"<string>\",\n            \"date\": \"<string>\",\n            \"truncated\": \"<boolean>\"\n          },\n          \"close\": {\n            \"day\": \"<number>\",\n            \"time\": \"<string>\",\n            \"date\": \"<string>\",\n            \"truncated\": \"<boolean>\"\n          }\n        }\n      ],\n      \"special_days\": [\n        {\n          \"date\": \"<string>\",\n          \"exceptional_hours\": \"<boolean>\"\n        },\n        {\n          \"date\": \"<string>\",\n          \"exceptional_hours\": \"<boolean>\"\n        }\n      ],\n      \"type\": \"<string>\",\n      \"weekday_text\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    \"permanently_closed\": \"<boolean>\",\n    \"photos\": [\n      {\n        \"photo_reference\": \"<string>\",\n        \"html_attributions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"width\": \"<number>\",\n        \"height\": \"<number>\"\n      },\n      {\n        \"photo_reference\": \"<string>\",\n        \"html_attributions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"width\": \"<number>\",\n        \"height\": \"<number>\"\n      }\n    ],\n    \"place_id\": \"<string>\",\n    \"plus_code\": {\n      \"global_code\": \"<string>\",\n      \"compound_code\": \"<string>\"\n    },\n    \"price_level\": \"<number>\",\n    \"rating\": \"<number>\",\n    \"reference\": \"<string>\",\n    \"reservable\": \"<boolean>\",\n    \"reviews\": [\n      {\n        \"author_name\": \"<string>\",\n        \"rating\": \"<number>\",\n        \"relative_time_description\": \"<string>\",\n        \"time\": \"<number>\",\n        \"author_url\": \"<string>\",\n        \"profile_photo_url\": \"<string>\",\n        \"language\": \"<string>\",\n        \"original_language\": \"<string>\",\n        \"text\": \"<string>\",\n        \"translated\": \"<boolean>\"\n      },\n      {\n        \"author_name\": \"<string>\",\n        \"rating\": \"<number>\",\n        \"relative_time_description\": \"<string>\",\n        \"time\": \"<number>\",\n        \"author_url\": \"<string>\",\n        \"profile_photo_url\": \"<string>\",\n        \"language\": \"<string>\",\n        \"original_language\": \"<string>\",\n        \"text\": \"<string>\",\n        \"translated\": \"<boolean>\"\n      }\n    ],\n    \"serves_beer\": \"<boolean>\",\n    \"serves_breakfast\": \"<boolean>\",\n    \"serves_brunch\": \"<boolean>\",\n    \"serves_dinner\": \"<boolean>\",\n    \"serves_lunch\": \"<boolean>\",\n    \"serves_vegetarian_food\": \"<boolean>\",\n    \"serves_wine\": \"<boolean>\",\n    \"scope\": \"<string>\",\n    \"secondary_opening_hours\": [\n      {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"takeout\": \"<boolean>\",\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"url\": \"<string>\",\n    \"user_ratings_total\": \"<number>\",\n    \"utc_offset\": \"<number>\",\n    \"vicinity\": \"<string>\",\n    \"website\": \"<string>\",\n    \"wheelchair_accessible_entrance\": \"<boolean>\"\n  },\n  \"status\": \"NOT_FOUND\",\n  \"info_messages\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
														}
													]
												}
											],
											"id": "253a0045-d17c-4b01-bca8-c4c0f48a888d"
										}
									],
									"id": "651471ce-cace-4f22-9342-c041f2274b84"
								},
								{
									"name": "findplacefromtext",
									"item": [
										{
											"name": "json",
											"item": [
												{
													"name": "A Find Place request takes a text input and returns a place. The input can be any kind of Places text data, such as a name, address, or phone number. The request must be a string. A Find Place request using non-string data such as a lat/lng coordinate or ",
													"id": "7309caa9-c217-40b3-9e5c-a743c737224e",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/place/findplacefromtext/json?fields=<string>&input=<string>&inputtype=phonenumber&locationbias=<string>&language=en",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"place",
																"findplacefromtext",
																"json"
															],
															"query": [
																{
																	"description": "\n<div class=\"caution\"> Caution: Place Search requests and Place Details requests do not return the same fields. Place Search requests return a subset of the fields that are returned by Place Details requests. If the field you want is not returned by Place Search, you can use Place Search to get a <code>place_id</code>, then use that Place ID to make a Place Details request. For more information on the fields that are unavailable in a Place Search request, see <a href=\"https://developers.google.com/maps/documentation/places/web-service/place-data-fields#places-api-fields-support\">Places API fields support</a>.</div>\n\nUse the fields parameter to specify a comma-separated list of place data types to return. For example: `fields=formatted_address,name,geometry`. Use a forward slash when specifying compound values. For example: `opening_hours/open_now`.\n\nFields are divided into three billing categories: Basic, Contact, and Atmosphere. Basic fields are billed at base rate, and incur no additional charges. Contact and Atmosphere fields are billed at a higher rate. See the [pricing sheet](https://developers.google.com/maps/documentation/places/web-service/usage-and-billing/) for more information. Attributions, `html_attributions`, are always returned with every call, regardless of whether the field has been requested.\n\n**Basic**\n\nThe Basic category includes the following fields: `address_components`, `adr_address`, `business_status`, `formatted_address`, `geometry`, `icon`, `icon_mask_base_uri`, `icon_background_color`, `name`, `permanently_closed` ([deprecated](https://developers.google.com/maps/deprecations)), `photo`, `place_id`, `plus_code`, `type`, `url`, `utc_offset`, `vicinity`, `wheelchair_accessible_entrance`.\n\n**Contact**\n\nThe Contact category includes the following fields: `current_opening_hours`, `formatted_phone_number`, `international_phone_number`, `opening_hours`, `secondary_opening_hours`, `website`\n\n**Atmosphere**\n\nThe Atmosphere category includes the following fields: `curbside_pickup`, `delivery`, `dine_in`, `editorial_summary`, `price_level`, `rating`, `reservable`, `reviews`, `serves_beer`, `serves_breakfast`, `serves_brunch`, `serves_dinner`, `serves_lunch`, `serves_vegetarian_food`, `serves_wine`, `takeout`, `user_ratings_total`.\n",
																	"key": "fields",
																	"value": "<string>"
																},
																{
																	"description": "(Required) The text string on which to search, for example: \"restaurant\" or \"123 Main Street\". This must be a place name, address, or category of establishments. Any other types of input can generate errors\nand are not guaranteed to return valid results. The Places API will return candidate matches based on this string and order the results based on their perceived relevance.\n",
																	"key": "input",
																	"value": "<string>"
																},
																{
																	"description": "(Required) The type of input. This can be one of either `textquery` or `phonenumber`. Phone numbers must be in international format (prefixed by a plus sign (\"+\"), followed by the country code, then the phone number itself). See [E.164 ITU recommendation](https://en.wikipedia.org/wiki/E.164) for more information.\n",
																	"key": "inputtype",
																	"value": "phonenumber"
																},
																{
																	"description": "Prefer results in a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle. If this parameter is not specified, the API uses IP address biasing by default.\n- IP bias: Instructs the API to use IP address biasing. Pass the string `ipbias` (this option has no additional parameters).\n- Circular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: `circle:radius@lat,lng`.\n- Rectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:`rectangle:south,west|north,east`. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.\n",
																	"key": "locationbias",
																	"value": "<string>"
																},
																{
																	"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																	"key": "language",
																	"value": "en"
																}
															]
														},
														"description": "A Find Place request takes a text input and returns a place. The input can be any kind of Places text data, such as a name, address, or phone number. The request must be a string. A Find Place request using non-string data such as a lat/lng coordinate or plus code generates an error.\n<div class=\"note\">Note: If you omit the fields parameter from a Find Place request, only the place_id for the result will be returned.</div>\n"
													},
													"response": [
														{
															"id": "ad5277f9-4400-4a6a-ae36-f667b8893737",
															"name": "200 OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "https://maps.googleapis.com/maps/api/place/findplacefromtext/json?fields=<string>&input=<string>&inputtype=phonenumber&locationbias=<string>&language=en&key=<API Key>",
																	"protocol": "https",
																	"host": [
																		"maps",
																		"googleapis",
																		"com"
																	],
																	"path": [
																		"maps",
																		"api",
																		"place",
																		"findplacefromtext",
																		"json"
																	],
																	"query": [
																		{
																			"description": "\n<div class=\"caution\"> Caution: Place Search requests and Place Details requests do not return the same fields. Place Search requests return a subset of the fields that are returned by Place Details requests. If the field you want is not returned by Place Search, you can use Place Search to get a <code>place_id</code>, then use that Place ID to make a Place Details request. For more information on the fields that are unavailable in a Place Search request, see <a href=\"https://developers.google.com/maps/documentation/places/web-service/place-data-fields#places-api-fields-support\">Places API fields support</a>.</div>\n\nUse the fields parameter to specify a comma-separated list of place data types to return. For example: `fields=formatted_address,name,geometry`. Use a forward slash when specifying compound values. For example: `opening_hours/open_now`.\n\nFields are divided into three billing categories: Basic, Contact, and Atmosphere. Basic fields are billed at base rate, and incur no additional charges. Contact and Atmosphere fields are billed at a higher rate. See the [pricing sheet](https://developers.google.com/maps/documentation/places/web-service/usage-and-billing/) for more information. Attributions, `html_attributions`, are always returned with every call, regardless of whether the field has been requested.\n\n**Basic**\n\nThe Basic category includes the following fields: `address_components`, `adr_address`, `business_status`, `formatted_address`, `geometry`, `icon`, `icon_mask_base_uri`, `icon_background_color`, `name`, `permanently_closed` ([deprecated](https://developers.google.com/maps/deprecations)), `photo`, `place_id`, `plus_code`, `type`, `url`, `utc_offset`, `vicinity`, `wheelchair_accessible_entrance`.\n\n**Contact**\n\nThe Contact category includes the following fields: `current_opening_hours`, `formatted_phone_number`, `international_phone_number`, `opening_hours`, `secondary_opening_hours`, `website`\n\n**Atmosphere**\n\nThe Atmosphere category includes the following fields: `curbside_pickup`, `delivery`, `dine_in`, `editorial_summary`, `price_level`, `rating`, `reservable`, `reviews`, `serves_beer`, `serves_breakfast`, `serves_brunch`, `serves_dinner`, `serves_lunch`, `serves_vegetarian_food`, `serves_wine`, `takeout`, `user_ratings_total`.\n",
																			"key": "fields",
																			"value": "<string>"
																		},
																		{
																			"description": "(Required) The text string on which to search, for example: \"restaurant\" or \"123 Main Street\". This must be a place name, address, or category of establishments. Any other types of input can generate errors\nand are not guaranteed to return valid results. The Places API will return candidate matches based on this string and order the results based on their perceived relevance.\n",
																			"key": "input",
																			"value": "<string>"
																		},
																		{
																			"description": "(Required) The type of input. This can be one of either `textquery` or `phonenumber`. Phone numbers must be in international format (prefixed by a plus sign (\"+\"), followed by the country code, then the phone number itself). See [E.164 ITU recommendation](https://en.wikipedia.org/wiki/E.164) for more information.\n",
																			"key": "inputtype",
																			"value": "phonenumber"
																		},
																		{
																			"description": "Prefer results in a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle. If this parameter is not specified, the API uses IP address biasing by default.\n- IP bias: Instructs the API to use IP address biasing. Pass the string `ipbias` (this option has no additional parameters).\n- Circular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: `circle:radius@lat,lng`.\n- Rectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:`rectangle:south,west|north,east`. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.\n",
																			"key": "locationbias",
																			"value": "<string>"
																		},
																		{
																			"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																			"key": "language",
																			"value": "en"
																		},
																		{
																			"description": "Added as a part of security scheme: apikey",
																			"key": "key",
																			"value": "<API Key>"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"candidates\": [\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"adr_address\": \"<string>\",\n      \"business_status\": \"CLOSED_TEMPORARILY\",\n      \"curbside_pickup\": \"<boolean>\",\n      \"current_opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"delivery\": \"<boolean>\",\n      \"dine_in\": \"<boolean>\",\n      \"editorial_summary\": {\n        \"overview\": \"<string>\",\n        \"language\": \"<string>\"\n      },\n      \"formatted_address\": \"<string>\",\n      \"formatted_phone_number\": \"<string>\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        },\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"southwest\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          }\n        }\n      },\n      \"icon\": \"<string>\",\n      \"icon_background_color\": \"<string>\",\n      \"icon_mask_base_uri\": \"<string>\",\n      \"international_phone_number\": \"<string>\",\n      \"name\": \"<string>\",\n      \"opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"permanently_closed\": \"<boolean>\",\n      \"photos\": [\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        },\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        }\n      ],\n      \"place_id\": \"<string>\",\n      \"plus_code\": {\n        \"global_code\": \"<string>\",\n        \"compound_code\": \"<string>\"\n      },\n      \"price_level\": \"<number>\",\n      \"rating\": \"<number>\",\n      \"reference\": \"<string>\",\n      \"reservable\": \"<boolean>\",\n      \"reviews\": [\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        },\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        }\n      ],\n      \"serves_beer\": \"<boolean>\",\n      \"serves_breakfast\": \"<boolean>\",\n      \"serves_brunch\": \"<boolean>\",\n      \"serves_dinner\": \"<boolean>\",\n      \"serves_lunch\": \"<boolean>\",\n      \"serves_vegetarian_food\": \"<boolean>\",\n      \"serves_wine\": \"<boolean>\",\n      \"scope\": \"<string>\",\n      \"secondary_opening_hours\": [\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"takeout\": \"<boolean>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"url\": \"<string>\",\n      \"user_ratings_total\": \"<number>\",\n      \"utc_offset\": \"<number>\",\n      \"vicinity\": \"<string>\",\n      \"website\": \"<string>\",\n      \"wheelchair_accessible_entrance\": \"<boolean>\"\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"adr_address\": \"<string>\",\n      \"business_status\": \"CLOSED_PERMANENTLY\",\n      \"curbside_pickup\": \"<boolean>\",\n      \"current_opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"delivery\": \"<boolean>\",\n      \"dine_in\": \"<boolean>\",\n      \"editorial_summary\": {\n        \"overview\": \"<string>\",\n        \"language\": \"<string>\"\n      },\n      \"formatted_address\": \"<string>\",\n      \"formatted_phone_number\": \"<string>\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        },\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"southwest\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          }\n        }\n      },\n      \"icon\": \"<string>\",\n      \"icon_background_color\": \"<string>\",\n      \"icon_mask_base_uri\": \"<string>\",\n      \"international_phone_number\": \"<string>\",\n      \"name\": \"<string>\",\n      \"opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"permanently_closed\": \"<boolean>\",\n      \"photos\": [\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        },\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        }\n      ],\n      \"place_id\": \"<string>\",\n      \"plus_code\": {\n        \"global_code\": \"<string>\",\n        \"compound_code\": \"<string>\"\n      },\n      \"price_level\": \"<number>\",\n      \"rating\": \"<number>\",\n      \"reference\": \"<string>\",\n      \"reservable\": \"<boolean>\",\n      \"reviews\": [\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        },\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        }\n      ],\n      \"serves_beer\": \"<boolean>\",\n      \"serves_breakfast\": \"<boolean>\",\n      \"serves_brunch\": \"<boolean>\",\n      \"serves_dinner\": \"<boolean>\",\n      \"serves_lunch\": \"<boolean>\",\n      \"serves_vegetarian_food\": \"<boolean>\",\n      \"serves_wine\": \"<boolean>\",\n      \"scope\": \"<string>\",\n      \"secondary_opening_hours\": [\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"takeout\": \"<boolean>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"url\": \"<string>\",\n      \"user_ratings_total\": \"<number>\",\n      \"utc_offset\": \"<number>\",\n      \"vicinity\": \"<string>\",\n      \"website\": \"<string>\",\n      \"wheelchair_accessible_entrance\": \"<boolean>\"\n    }\n  ],\n  \"status\": \"REQUEST_DENIED\",\n  \"error_message\": \"<string>\",\n  \"info_messages\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
														}
													]
												}
											],
											"id": "0123847e-4ba0-44ae-adc8-dda7eb3bee88"
										}
									],
									"id": "5c66259a-1bb0-4b49-ab63-387d29ad8b21"
								},
								{
									"name": "nearbysearch",
									"item": [
										{
											"name": "json",
											"item": [
												{
													"name": "A Nearby Search lets you search for places within a specified area. You can refine your search request by supplying keywords or specifying the type of place you are searching for.",
													"id": "4b00def1-6dc1-4ce1-8e43-fee78a7544e6",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/place/nearbysearch/json?keyword=<string>&location=<string>&maxprice=4&minprice=4&name=<string>&opennow=<boolean>&pagetoken=<string>&rankby=prominence&radius=<number>&type=<string>&language=en",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"place",
																"nearbysearch",
																"json"
															],
															"query": [
																{
																	"description": "The text string on which to search, for example: \"restaurant\" or \"123 Main Street\". This must be a place name, address, or category of establishments.\nAny other types of input can generate errors and are not guaranteed to return valid results. The Google Places service will return candidate matches\nbased on this string and order the results based on their perceived relevance.\n\nExplicitly including location information using this parameter may conflict with the location, radius, and rankby parameters, causing unexpected results.\n\nIf this parameter is omitted, places with a business_status of CLOSED_TEMPORARILY or CLOSED_PERMANENTLY will not be returned.\n",
																	"key": "keyword",
																	"value": "<string>"
																},
																{
																	"description": "(Required) The point around which to retrieve place information. This must be specified as `latitude,longitude`.\n",
																	"key": "location",
																	"value": "<string>"
																},
																{
																	"description": "Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.\n",
																	"key": "maxprice",
																	"value": "4"
																},
																{
																	"description": "Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.\n",
																	"key": "minprice",
																	"value": "4"
																},
																{
																	"description": "Equivalent to `keyword`. Values in this field are combined with values in the `keyword` field and passed as part of the same search string.\n",
																	"key": "name",
																	"value": "<string>"
																},
																{
																	"description": "Returns only those places that are open for business at the time the query is sent. Places that do not specify opening hours in the Google Places database will not be returned if you include this parameter in your query.\n",
																	"key": "opennow",
																	"value": "<boolean>"
																},
																{
																	"description": "Returns up to 20 results from a previously run search. Setting a `pagetoken` parameter will execute a search with the same parameters used previously — all parameters other than pagetoken will be ignored.\n",
																	"key": "pagetoken",
																	"value": "<string>"
																},
																{
																	"description": "Specifies the order in which results are listed. Possible values are:\n- `prominence` (default). This option sorts results based on their importance. Ranking will favor prominent places within the set radius over nearby places that match but that are less prominent. Prominence can be affected by a place's ranking in Google's index, global popularity, and other factors. When prominence is specified, the `radius` parameter is required.\n- `distance`. This option biases search results in ascending order by their distance from the specified location. When `distance` is specified, one or more of `keyword`, `name`, or `type` is required and `radius` is disallowed.\n",
																	"key": "rankby",
																	"value": "prominence"
																},
																{
																	"description": "(Required) Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.\n\nThe radius will automatically be clamped to a maximum value depending on the type of search and other parameters.\n\n* Autocomplete: 50,000 meters\n* Nearby Search: \n  * with `keyword` or `name`: 50,000 meters\n  * without `keyword` or `name`\n    * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.\n    * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.\n* Query Autocomplete: 50,000 meters\n* Text Search: 50,000 meters\n",
																	"key": "radius",
																	"value": "<number>"
																},
																{
																	"description": "Restricts the results to places matching the specified type. Only one type may be specified. If more than one type is provided, all types following the first entry are ignored.\n\n* `type=hospital|pharmacy|doctor` becomes `type=hospital`\n* `type=hospital,pharmacy,doctor` is ignored entirely\n\nSee the list of [supported types](https://developers.google.com/maps/documentation/places/web-service/supported_types).\n<div class=\"note\">Note: Adding both `keyword` and `type` with the same value (`keyword=cafe&type=cafe` or `keyword=parking&type=parking`) can yield `ZERO_RESULTS`.</div>\n",
																	"key": "type",
																	"value": "<string>"
																},
																{
																	"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																	"key": "language",
																	"value": "en"
																}
															]
														},
														"description": "A Nearby Search lets you search for places within a specified area. You can refine your search request by supplying keywords or specifying the type of place you are searching for."
													},
													"response": [
														{
															"id": "089b6646-f604-48d1-8805-455552d19317",
															"name": "200 OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "https://maps.googleapis.com/maps/api/place/nearbysearch/json?keyword=<string>&location=<string>&maxprice=4&minprice=4&name=<string>&opennow=<boolean>&pagetoken=<string>&rankby=prominence&radius=<number>&type=<string>&language=en&key=<API Key>",
																	"protocol": "https",
																	"host": [
																		"maps",
																		"googleapis",
																		"com"
																	],
																	"path": [
																		"maps",
																		"api",
																		"place",
																		"nearbysearch",
																		"json"
																	],
																	"query": [
																		{
																			"description": "The text string on which to search, for example: \"restaurant\" or \"123 Main Street\". This must be a place name, address, or category of establishments.\nAny other types of input can generate errors and are not guaranteed to return valid results. The Google Places service will return candidate matches\nbased on this string and order the results based on their perceived relevance.\n\nExplicitly including location information using this parameter may conflict with the location, radius, and rankby parameters, causing unexpected results.\n\nIf this parameter is omitted, places with a business_status of CLOSED_TEMPORARILY or CLOSED_PERMANENTLY will not be returned.\n",
																			"key": "keyword",
																			"value": "<string>"
																		},
																		{
																			"description": "(Required) The point around which to retrieve place information. This must be specified as `latitude,longitude`.\n",
																			"key": "location",
																			"value": "<string>"
																		},
																		{
																			"description": "Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.\n",
																			"key": "maxprice",
																			"value": "4"
																		},
																		{
																			"description": "Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.\n",
																			"key": "minprice",
																			"value": "4"
																		},
																		{
																			"description": "Equivalent to `keyword`. Values in this field are combined with values in the `keyword` field and passed as part of the same search string.\n",
																			"key": "name",
																			"value": "<string>"
																		},
																		{
																			"description": "Returns only those places that are open for business at the time the query is sent. Places that do not specify opening hours in the Google Places database will not be returned if you include this parameter in your query.\n",
																			"key": "opennow",
																			"value": "<boolean>"
																		},
																		{
																			"description": "Returns up to 20 results from a previously run search. Setting a `pagetoken` parameter will execute a search with the same parameters used previously — all parameters other than pagetoken will be ignored.\n",
																			"key": "pagetoken",
																			"value": "<string>"
																		},
																		{
																			"description": "Specifies the order in which results are listed. Possible values are:\n- `prominence` (default). This option sorts results based on their importance. Ranking will favor prominent places within the set radius over nearby places that match but that are less prominent. Prominence can be affected by a place's ranking in Google's index, global popularity, and other factors. When prominence is specified, the `radius` parameter is required.\n- `distance`. This option biases search results in ascending order by their distance from the specified location. When `distance` is specified, one or more of `keyword`, `name`, or `type` is required and `radius` is disallowed.\n",
																			"key": "rankby",
																			"value": "prominence"
																		},
																		{
																			"description": "(Required) Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.\n\nThe radius will automatically be clamped to a maximum value depending on the type of search and other parameters.\n\n* Autocomplete: 50,000 meters\n* Nearby Search: \n  * with `keyword` or `name`: 50,000 meters\n  * without `keyword` or `name`\n    * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.\n    * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.\n* Query Autocomplete: 50,000 meters\n* Text Search: 50,000 meters\n",
																			"key": "radius",
																			"value": "<number>"
																		},
																		{
																			"description": "Restricts the results to places matching the specified type. Only one type may be specified. If more than one type is provided, all types following the first entry are ignored.\n\n* `type=hospital|pharmacy|doctor` becomes `type=hospital`\n* `type=hospital,pharmacy,doctor` is ignored entirely\n\nSee the list of [supported types](https://developers.google.com/maps/documentation/places/web-service/supported_types).\n<div class=\"note\">Note: Adding both `keyword` and `type` with the same value (`keyword=cafe&type=cafe` or `keyword=parking&type=parking`) can yield `ZERO_RESULTS`.</div>\n",
																			"key": "type",
																			"value": "<string>"
																		},
																		{
																			"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																			"key": "language",
																			"value": "en"
																		},
																		{
																			"description": "Added as a part of security scheme: apikey",
																			"key": "key",
																			"value": "<API Key>"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"html_attributions\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"results\": [\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"adr_address\": \"<string>\",\n      \"business_status\": \"CLOSED_PERMANENTLY\",\n      \"curbside_pickup\": \"<boolean>\",\n      \"current_opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"delivery\": \"<boolean>\",\n      \"dine_in\": \"<boolean>\",\n      \"editorial_summary\": {\n        \"overview\": \"<string>\",\n        \"language\": \"<string>\"\n      },\n      \"formatted_address\": \"<string>\",\n      \"formatted_phone_number\": \"<string>\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        },\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"southwest\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          }\n        }\n      },\n      \"icon\": \"<string>\",\n      \"icon_background_color\": \"<string>\",\n      \"icon_mask_base_uri\": \"<string>\",\n      \"international_phone_number\": \"<string>\",\n      \"name\": \"<string>\",\n      \"opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"permanently_closed\": \"<boolean>\",\n      \"photos\": [\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        },\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        }\n      ],\n      \"place_id\": \"<string>\",\n      \"plus_code\": {\n        \"global_code\": \"<string>\",\n        \"compound_code\": \"<string>\"\n      },\n      \"price_level\": \"<number>\",\n      \"rating\": \"<number>\",\n      \"reference\": \"<string>\",\n      \"reservable\": \"<boolean>\",\n      \"reviews\": [\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        },\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        }\n      ],\n      \"serves_beer\": \"<boolean>\",\n      \"serves_breakfast\": \"<boolean>\",\n      \"serves_brunch\": \"<boolean>\",\n      \"serves_dinner\": \"<boolean>\",\n      \"serves_lunch\": \"<boolean>\",\n      \"serves_vegetarian_food\": \"<boolean>\",\n      \"serves_wine\": \"<boolean>\",\n      \"scope\": \"<string>\",\n      \"secondary_opening_hours\": [\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"takeout\": \"<boolean>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"url\": \"<string>\",\n      \"user_ratings_total\": \"<number>\",\n      \"utc_offset\": \"<number>\",\n      \"vicinity\": \"<string>\",\n      \"website\": \"<string>\",\n      \"wheelchair_accessible_entrance\": \"<boolean>\"\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"adr_address\": \"<string>\",\n      \"business_status\": \"CLOSED_TEMPORARILY\",\n      \"curbside_pickup\": \"<boolean>\",\n      \"current_opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"delivery\": \"<boolean>\",\n      \"dine_in\": \"<boolean>\",\n      \"editorial_summary\": {\n        \"overview\": \"<string>\",\n        \"language\": \"<string>\"\n      },\n      \"formatted_address\": \"<string>\",\n      \"formatted_phone_number\": \"<string>\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        },\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"southwest\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          }\n        }\n      },\n      \"icon\": \"<string>\",\n      \"icon_background_color\": \"<string>\",\n      \"icon_mask_base_uri\": \"<string>\",\n      \"international_phone_number\": \"<string>\",\n      \"name\": \"<string>\",\n      \"opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"permanently_closed\": \"<boolean>\",\n      \"photos\": [\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        },\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        }\n      ],\n      \"place_id\": \"<string>\",\n      \"plus_code\": {\n        \"global_code\": \"<string>\",\n        \"compound_code\": \"<string>\"\n      },\n      \"price_level\": \"<number>\",\n      \"rating\": \"<number>\",\n      \"reference\": \"<string>\",\n      \"reservable\": \"<boolean>\",\n      \"reviews\": [\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        },\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        }\n      ],\n      \"serves_beer\": \"<boolean>\",\n      \"serves_breakfast\": \"<boolean>\",\n      \"serves_brunch\": \"<boolean>\",\n      \"serves_dinner\": \"<boolean>\",\n      \"serves_lunch\": \"<boolean>\",\n      \"serves_vegetarian_food\": \"<boolean>\",\n      \"serves_wine\": \"<boolean>\",\n      \"scope\": \"<string>\",\n      \"secondary_opening_hours\": [\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"takeout\": \"<boolean>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"url\": \"<string>\",\n      \"user_ratings_total\": \"<number>\",\n      \"utc_offset\": \"<number>\",\n      \"vicinity\": \"<string>\",\n      \"website\": \"<string>\",\n      \"wheelchair_accessible_entrance\": \"<boolean>\"\n    }\n  ],\n  \"status\": \"OK\",\n  \"error_message\": \"<string>\",\n  \"info_messages\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"next_page_token\": \"<string>\"\n}"
														}
													]
												}
											],
											"id": "db8c1847-a37f-426d-8b48-120281393b49"
										}
									],
									"id": "d6dd873e-f760-4f08-8500-8eb3e52eda2d"
								},
								{
									"name": "textsearch",
									"item": [
										{
											"name": "json",
											"item": [
												{
													"name": "The Google Places API Text Search Service is a web service that returns information about a set of places based on a string — for example \"pizza in New York\" or \"shoe stores near Ottawa\" or \"123 Main Street\". The service responds with a list of places mat",
													"id": "0c31b2ca-d5ce-4c20-8747-348532651299",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/place/textsearch/json?location=<string>&maxprice=4&minprice=4&opennow=<boolean>&pagetoken=<string>&query=<string>&radius=<number>&type=<string>&language=en&region=en",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"place",
																"textsearch",
																"json"
															],
															"query": [
																{
																	"description": "The point around which to retrieve place information. This must be specified as `latitude,longitude`. \n\n<div class=\"note\">The <code>location</code> parameter may be overriden if the <code>query</code> contains an explicit location such as <code>Market in Barcelona</code>. Using quotes around the query may also influence the weight given to the <code>location</code> and <code>radius</code>.</div>\n",
																	"key": "location",
																	"value": "<string>"
																},
																{
																	"description": "Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.\n",
																	"key": "maxprice",
																	"value": "4"
																},
																{
																	"description": "Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.\n",
																	"key": "minprice",
																	"value": "4"
																},
																{
																	"description": "Returns only those places that are open for business at the time the query is sent. Places that do not specify opening hours in the Google Places database will not be returned if you include this parameter in your query.\n",
																	"key": "opennow",
																	"value": "<boolean>"
																},
																{
																	"description": "Returns up to 20 results from a previously run search. Setting a `pagetoken` parameter will execute a search with the same parameters used previously — all parameters other than pagetoken will be ignored.\n",
																	"key": "pagetoken",
																	"value": "<string>"
																},
																{
																	"description": "(Required) The text string on which to search, for example: \"restaurant\" or \"123 Main Street\". This must a place name, address, or category of establishments. Any other types\nof input can generate errors and are not guaranteed to return valid results. The Google Places service will return candidate matches based on this string and order\nthe results based on their perceived relevance.\n",
																	"key": "query",
																	"value": "<string>"
																},
																{
																	"description": "(Required) Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.\n\nThe radius will automatically be clamped to a maximum value depending on the type of search and other parameters.\n\n* Autocomplete: 50,000 meters\n* Nearby Search: \n  * with `keyword` or `name`: 50,000 meters\n  * without `keyword` or `name`\n    * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.\n    * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.\n* Query Autocomplete: 50,000 meters\n* Text Search: 50,000 meters\n",
																	"key": "radius",
																	"value": "<number>"
																},
																{
																	"description": "Restricts the results to places matching the specified type. Only one type may be specified. If more than one type is provided, all types following the first entry are ignored.\n\n* `type=hospital|pharmacy|doctor` becomes `type=hospital`\n* `type=hospital,pharmacy,doctor` is ignored entirely\n\nSee the list of [supported types](https://developers.google.com/maps/documentation/places/web-service/supported_types).\n<div class=\"note\">Note: Adding both `keyword` and `type` with the same value (`keyword=cafe&type=cafe` or `keyword=parking&type=parking`) can yield `ZERO_RESULTS`.</div>\n",
																	"key": "type",
																	"value": "<string>"
																},
																{
																	"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																	"key": "language",
																	"value": "en"
																},
																{
																	"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
																	"key": "region",
																	"value": "en"
																}
															]
														},
														"description": "The Google Places API Text Search Service is a web service that returns information about a set of places based on a string — for example \"pizza in New York\" or \"shoe stores near Ottawa\" or \"123 Main Street\". The service responds with a list of places matching the text string and any location bias that has been set.\n\nThe service is especially useful for making [ambiguous address](https://developers.google.com/maps/documentation/geocoding/best-practices) queries in an automated system, and non-address components of the string may match businesses as well as addresses. Examples of ambiguous address queries are incomplete addresses, poorly formatted addresses, or a request that includes non-address components such as business names.\n\nThe search response will include a list of places. You can send a Place Details request for more information about any of the places in the response.\n"
													},
													"response": [
														{
															"id": "55109262-cc8f-4d57-b5b2-af63ca13580a",
															"name": "200 OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "https://maps.googleapis.com/maps/api/place/textsearch/json?location=<string>&maxprice=4&minprice=4&opennow=<boolean>&pagetoken=<string>&query=<string>&radius=<number>&type=<string>&language=en&region=en&key=<API Key>",
																	"protocol": "https",
																	"host": [
																		"maps",
																		"googleapis",
																		"com"
																	],
																	"path": [
																		"maps",
																		"api",
																		"place",
																		"textsearch",
																		"json"
																	],
																	"query": [
																		{
																			"description": "The point around which to retrieve place information. This must be specified as `latitude,longitude`. \n\n<div class=\"note\">The <code>location</code> parameter may be overriden if the <code>query</code> contains an explicit location such as <code>Market in Barcelona</code>. Using quotes around the query may also influence the weight given to the <code>location</code> and <code>radius</code>.</div>\n",
																			"key": "location",
																			"value": "<string>"
																		},
																		{
																			"description": "Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.\n",
																			"key": "maxprice",
																			"value": "4"
																		},
																		{
																			"description": "Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.\n",
																			"key": "minprice",
																			"value": "4"
																		},
																		{
																			"description": "Returns only those places that are open for business at the time the query is sent. Places that do not specify opening hours in the Google Places database will not be returned if you include this parameter in your query.\n",
																			"key": "opennow",
																			"value": "<boolean>"
																		},
																		{
																			"description": "Returns up to 20 results from a previously run search. Setting a `pagetoken` parameter will execute a search with the same parameters used previously — all parameters other than pagetoken will be ignored.\n",
																			"key": "pagetoken",
																			"value": "<string>"
																		},
																		{
																			"description": "(Required) The text string on which to search, for example: \"restaurant\" or \"123 Main Street\". This must a place name, address, or category of establishments. Any other types\nof input can generate errors and are not guaranteed to return valid results. The Google Places service will return candidate matches based on this string and order\nthe results based on their perceived relevance.\n",
																			"key": "query",
																			"value": "<string>"
																		},
																		{
																			"description": "(Required) Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.\n\nThe radius will automatically be clamped to a maximum value depending on the type of search and other parameters.\n\n* Autocomplete: 50,000 meters\n* Nearby Search: \n  * with `keyword` or `name`: 50,000 meters\n  * without `keyword` or `name`\n    * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.\n    * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.\n* Query Autocomplete: 50,000 meters\n* Text Search: 50,000 meters\n",
																			"key": "radius",
																			"value": "<number>"
																		},
																		{
																			"description": "Restricts the results to places matching the specified type. Only one type may be specified. If more than one type is provided, all types following the first entry are ignored.\n\n* `type=hospital|pharmacy|doctor` becomes `type=hospital`\n* `type=hospital,pharmacy,doctor` is ignored entirely\n\nSee the list of [supported types](https://developers.google.com/maps/documentation/places/web-service/supported_types).\n<div class=\"note\">Note: Adding both `keyword` and `type` with the same value (`keyword=cafe&type=cafe` or `keyword=parking&type=parking`) can yield `ZERO_RESULTS`.</div>\n",
																			"key": "type",
																			"value": "<string>"
																		},
																		{
																			"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																			"key": "language",
																			"value": "en"
																		},
																		{
																			"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
																			"key": "region",
																			"value": "en"
																		},
																		{
																			"description": "Added as a part of security scheme: apikey",
																			"key": "key",
																			"value": "<API Key>"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"html_attributions\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"results\": [\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"adr_address\": \"<string>\",\n      \"business_status\": \"OPERATIONAL\",\n      \"curbside_pickup\": \"<boolean>\",\n      \"current_opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"delivery\": \"<boolean>\",\n      \"dine_in\": \"<boolean>\",\n      \"editorial_summary\": {\n        \"overview\": \"<string>\",\n        \"language\": \"<string>\"\n      },\n      \"formatted_address\": \"<string>\",\n      \"formatted_phone_number\": \"<string>\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        },\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"southwest\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          }\n        }\n      },\n      \"icon\": \"<string>\",\n      \"icon_background_color\": \"<string>\",\n      \"icon_mask_base_uri\": \"<string>\",\n      \"international_phone_number\": \"<string>\",\n      \"name\": \"<string>\",\n      \"opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"permanently_closed\": \"<boolean>\",\n      \"photos\": [\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        },\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        }\n      ],\n      \"place_id\": \"<string>\",\n      \"plus_code\": {\n        \"global_code\": \"<string>\",\n        \"compound_code\": \"<string>\"\n      },\n      \"price_level\": \"<number>\",\n      \"rating\": \"<number>\",\n      \"reference\": \"<string>\",\n      \"reservable\": \"<boolean>\",\n      \"reviews\": [\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        },\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        }\n      ],\n      \"serves_beer\": \"<boolean>\",\n      \"serves_breakfast\": \"<boolean>\",\n      \"serves_brunch\": \"<boolean>\",\n      \"serves_dinner\": \"<boolean>\",\n      \"serves_lunch\": \"<boolean>\",\n      \"serves_vegetarian_food\": \"<boolean>\",\n      \"serves_wine\": \"<boolean>\",\n      \"scope\": \"<string>\",\n      \"secondary_opening_hours\": [\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"takeout\": \"<boolean>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"url\": \"<string>\",\n      \"user_ratings_total\": \"<number>\",\n      \"utc_offset\": \"<number>\",\n      \"vicinity\": \"<string>\",\n      \"website\": \"<string>\",\n      \"wheelchair_accessible_entrance\": \"<boolean>\"\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"long_name\": \"<string>\",\n          \"short_name\": \"<string>\",\n          \"types\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"adr_address\": \"<string>\",\n      \"business_status\": \"OPERATIONAL\",\n      \"curbside_pickup\": \"<boolean>\",\n      \"current_opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"delivery\": \"<boolean>\",\n      \"dine_in\": \"<boolean>\",\n      \"editorial_summary\": {\n        \"overview\": \"<string>\",\n        \"language\": \"<string>\"\n      },\n      \"formatted_address\": \"<string>\",\n      \"formatted_phone_number\": \"<string>\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": \"<number>\",\n          \"lng\": \"<number>\"\n        },\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          },\n          \"southwest\": {\n            \"lat\": \"<number>\",\n            \"lng\": \"<number>\"\n          }\n        }\n      },\n      \"icon\": \"<string>\",\n      \"icon_background_color\": \"<string>\",\n      \"icon_mask_base_uri\": \"<string>\",\n      \"international_phone_number\": \"<string>\",\n      \"name\": \"<string>\",\n      \"opening_hours\": {\n        \"open_now\": \"<boolean>\",\n        \"periods\": [\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          },\n          {\n            \"open\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            },\n            \"close\": {\n              \"day\": \"<number>\",\n              \"time\": \"<string>\",\n              \"date\": \"<string>\",\n              \"truncated\": \"<boolean>\"\n            }\n          }\n        ],\n        \"special_days\": [\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          },\n          {\n            \"date\": \"<string>\",\n            \"exceptional_hours\": \"<boolean>\"\n          }\n        ],\n        \"type\": \"<string>\",\n        \"weekday_text\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"permanently_closed\": \"<boolean>\",\n      \"photos\": [\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        },\n        {\n          \"photo_reference\": \"<string>\",\n          \"html_attributions\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"width\": \"<number>\",\n          \"height\": \"<number>\"\n        }\n      ],\n      \"place_id\": \"<string>\",\n      \"plus_code\": {\n        \"global_code\": \"<string>\",\n        \"compound_code\": \"<string>\"\n      },\n      \"price_level\": \"<number>\",\n      \"rating\": \"<number>\",\n      \"reference\": \"<string>\",\n      \"reservable\": \"<boolean>\",\n      \"reviews\": [\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        },\n        {\n          \"author_name\": \"<string>\",\n          \"rating\": \"<number>\",\n          \"relative_time_description\": \"<string>\",\n          \"time\": \"<number>\",\n          \"author_url\": \"<string>\",\n          \"profile_photo_url\": \"<string>\",\n          \"language\": \"<string>\",\n          \"original_language\": \"<string>\",\n          \"text\": \"<string>\",\n          \"translated\": \"<boolean>\"\n        }\n      ],\n      \"serves_beer\": \"<boolean>\",\n      \"serves_breakfast\": \"<boolean>\",\n      \"serves_brunch\": \"<boolean>\",\n      \"serves_dinner\": \"<boolean>\",\n      \"serves_lunch\": \"<boolean>\",\n      \"serves_vegetarian_food\": \"<boolean>\",\n      \"serves_wine\": \"<boolean>\",\n      \"scope\": \"<string>\",\n      \"secondary_opening_hours\": [\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"open_now\": \"<boolean>\",\n          \"periods\": [\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            },\n            {\n              \"open\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              },\n              \"close\": {\n                \"day\": \"<number>\",\n                \"time\": \"<string>\",\n                \"date\": \"<string>\",\n                \"truncated\": \"<boolean>\"\n              }\n            }\n          ],\n          \"special_days\": [\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            },\n            {\n              \"date\": \"<string>\",\n              \"exceptional_hours\": \"<boolean>\"\n            }\n          ],\n          \"type\": \"<string>\",\n          \"weekday_text\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ],\n      \"takeout\": \"<boolean>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"url\": \"<string>\",\n      \"user_ratings_total\": \"<number>\",\n      \"utc_offset\": \"<number>\",\n      \"vicinity\": \"<string>\",\n      \"website\": \"<string>\",\n      \"wheelchair_accessible_entrance\": \"<boolean>\"\n    }\n  ],\n  \"status\": \"ZERO_RESULTS\",\n  \"error_message\": \"<string>\",\n  \"info_messages\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"next_page_token\": \"<string>\"\n}"
														}
													]
												}
											],
											"id": "05a7c97d-206c-4ff8-8f66-76e2d14ad890"
										}
									],
									"id": "662ff101-5a5a-4358-b8b5-1526026f0ba8"
								},
								{
									"name": "photo",
									"item": [
										{
											"name": "The Place Photo service, part of the Places API, is a read- only API that allows you to add high quality photographic content to your application. The Place Photo service gives you access to the millions of photos stored in the Places database. When you g",
											"id": "d4f1095c-92e6-42c5-8147-333d1dcb6ca8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "image/*"
													}
												],
												"url": {
													"raw": "https://maps.googleapis.com/maps/api/place/photo?photo_reference=<string>&maxheight=<number>&maxwidth=<number>",
													"protocol": "https",
													"host": [
														"maps",
														"googleapis",
														"com"
													],
													"path": [
														"maps",
														"api",
														"place",
														"photo"
													],
													"query": [
														{
															"description": "(Required) A string identifier that uniquely identifies a photo. Photo references are returned from either a Place Search or Place Details request.\n",
															"key": "photo_reference",
															"value": "<string>"
														},
														{
															"description": "Specifies the maximum desired height, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between `1` and `1600`.\n",
															"key": "maxheight",
															"value": "<number>"
														},
														{
															"description": "Specifies the maximum desired width, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between `1` and `1600`.\n",
															"key": "maxwidth",
															"value": "<number>"
														}
													]
												},
												"description": "The Place Photo service, part of the Places API, is a read- only API that allows you to add high quality photographic content to your application. The Place Photo service gives you access to the millions of photos stored in the Places database. When you get place information using a Place Details request, photo references will be returned for relevant photographic content. Find Place, Nearby Search, and Text Search requests also return a single photo reference per place, when relevant. Using the Photo service you can then access the referenced photos and resize the image to the optimal size for your application.\n\nPhotos returned by the Photo service are sourced from a variety of locations, including business owners and user contributed photos. In most cases, these photos can be used without attribution, or will have the required attribution included as a part of the image. However, if the returned photo element includes a value in the html_attributions field, you will have to include the additional attribution in your application wherever you display the image.\n"
											},
											"response": [
												{
													"id": "fb5d73ce-8751-49bd-9ce7-1eecfcc2bffb",
													"name": "200 OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "image/*"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/place/photo?photo_reference=<string>&maxheight=<number>&maxwidth=<number>&key=<API Key>",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"place",
																"photo"
															],
															"query": [
																{
																	"description": "(Required) A string identifier that uniquely identifies a photo. Photo references are returned from either a Place Search or Place Details request.\n",
																	"key": "photo_reference",
																	"value": "<string>"
																},
																{
																	"description": "Specifies the maximum desired height, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between `1` and `1600`.\n",
																	"key": "maxheight",
																	"value": "<number>"
																},
																{
																	"description": "Specifies the maximum desired width, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between `1` and `1600`.\n",
																	"key": "maxwidth",
																	"value": "<number>"
																},
																{
																	"description": "Added as a part of security scheme: apikey",
																	"key": "key",
																	"value": "<API Key>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "image/*"
														}
													],
													"cookie": [],
													"body": "<string>"
												}
											]
										}
									],
									"id": "5d5f5c93-6e13-433d-86d6-b014efcadffa"
								},
								{
									"name": "queryautocomplete",
									"item": [
										{
											"name": "json",
											"item": [
												{
													"name": "The Query Autocomplete service can be used to provide a query prediction for text-based geographic searches, by returning suggested queries as you type.\n\nThe Query Autocomplete service allows you to add on-the-fly geographic query predictions to your appl",
													"id": "2482821a-ddb1-4b99-af04-1a047a16d02c",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/place/queryautocomplete/json?input=<string>&offset=<number>&location=<string>&radius=<number>&language=en",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"place",
																"queryautocomplete",
																"json"
															],
															"query": [
																{
																	"description": "(Required) The text string on which to search. The Place Autocomplete service will return candidate matches based on this string and order results based on their perceived relevance.\n",
																	"key": "input",
																	"value": "<string>"
																},
																{
																	"description": "The position, in the input term, of the last character that the service uses to match predictions. For example, if the input is `Google` and the offset is 3, the service will match on `Goo`. The string determined by the offset is matched against the first word in the input term only. For example, if the input term is `Google abc` and the offset is 3, the service will attempt to match against `Goo abc`. If no offset is supplied, the service will use the whole term. The offset should generally be set to the position of the text caret.\n",
																	"key": "offset",
																	"value": "<number>"
																},
																{
																	"description": "The point around which to retrieve place information. This must be specified as `latitude,longitude`. \n\n<div class=\"note\">The <code>location</code> parameter may be overriden if the <code>query</code> contains an explicit location such as <code>Market in Barcelona</code>. Using quotes around the query may also influence the weight given to the <code>location</code> and <code>radius</code>.</div>\n",
																	"key": "location",
																	"value": "<string>"
																},
																{
																	"description": "(Required) Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.\n\nThe radius will automatically be clamped to a maximum value depending on the type of search and other parameters.\n\n* Autocomplete: 50,000 meters\n* Nearby Search: \n  * with `keyword` or `name`: 50,000 meters\n  * without `keyword` or `name`\n    * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.\n    * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.\n* Query Autocomplete: 50,000 meters\n* Text Search: 50,000 meters\n",
																	"key": "radius",
																	"value": "<number>"
																},
																{
																	"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																	"key": "language",
																	"value": "en"
																}
															]
														},
														"description": "The Query Autocomplete service can be used to provide a query prediction for text-based geographic searches, by returning suggested queries as you type.\n\nThe Query Autocomplete service allows you to add on-the-fly geographic query predictions to your application. Instead of searching for a specific location, a user can type in a categorical search, such as \"pizza near New York\" and the service responds with a list of suggested queries matching the string. As the Query Autocomplete service can match on both full words and substrings, applications can send queries as the user types to provide on-the-fly predictions.\n"
													},
													"response": [
														{
															"id": "b979e4cd-3575-4ad2-a027-349ab38d7256",
															"name": "200 OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "https://maps.googleapis.com/maps/api/place/queryautocomplete/json?input=<string>&offset=<number>&location=<string>&radius=<number>&language=en&key=<API Key>",
																	"protocol": "https",
																	"host": [
																		"maps",
																		"googleapis",
																		"com"
																	],
																	"path": [
																		"maps",
																		"api",
																		"place",
																		"queryautocomplete",
																		"json"
																	],
																	"query": [
																		{
																			"description": "(Required) The text string on which to search. The Place Autocomplete service will return candidate matches based on this string and order results based on their perceived relevance.\n",
																			"key": "input",
																			"value": "<string>"
																		},
																		{
																			"description": "The position, in the input term, of the last character that the service uses to match predictions. For example, if the input is `Google` and the offset is 3, the service will match on `Goo`. The string determined by the offset is matched against the first word in the input term only. For example, if the input term is `Google abc` and the offset is 3, the service will attempt to match against `Goo abc`. If no offset is supplied, the service will use the whole term. The offset should generally be set to the position of the text caret.\n",
																			"key": "offset",
																			"value": "<number>"
																		},
																		{
																			"description": "The point around which to retrieve place information. This must be specified as `latitude,longitude`. \n\n<div class=\"note\">The <code>location</code> parameter may be overriden if the <code>query</code> contains an explicit location such as <code>Market in Barcelona</code>. Using quotes around the query may also influence the weight given to the <code>location</code> and <code>radius</code>.</div>\n",
																			"key": "location",
																			"value": "<string>"
																		},
																		{
																			"description": "(Required) Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.\n\nThe radius will automatically be clamped to a maximum value depending on the type of search and other parameters.\n\n* Autocomplete: 50,000 meters\n* Nearby Search: \n  * with `keyword` or `name`: 50,000 meters\n  * without `keyword` or `name`\n    * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.\n    * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.\n* Query Autocomplete: 50,000 meters\n* Text Search: 50,000 meters\n",
																			"key": "radius",
																			"value": "<number>"
																		},
																		{
																			"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																			"key": "language",
																			"value": "en"
																		},
																		{
																			"description": "Added as a part of security scheme: apikey",
																			"key": "key",
																			"value": "<API Key>"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"predictions\": [\n    {\n      \"description\": \"<string>\",\n      \"matched_substrings\": [\n        {\n          \"length\": \"<number>\",\n          \"offset\": \"<number>\"\n        },\n        {\n          \"length\": \"<number>\",\n          \"offset\": \"<number>\"\n        }\n      ],\n      \"structured_formatting\": {\n        \"main_text\": \"<string>\",\n        \"main_text_matched_substrings\": [\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          },\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          }\n        ],\n        \"secondary_text\": \"<string>\",\n        \"secondary_text_matched_substrings\": [\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          },\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          }\n        ]\n      },\n      \"terms\": [\n        {\n          \"value\": \"<string>\",\n          \"offset\": \"<number>\"\n        },\n        {\n          \"value\": \"<string>\",\n          \"offset\": \"<number>\"\n        }\n      ],\n      \"place_id\": \"<string>\",\n      \"reference\": \"<string>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"distance_meters\": \"<integer>\"\n    },\n    {\n      \"description\": \"<string>\",\n      \"matched_substrings\": [\n        {\n          \"length\": \"<number>\",\n          \"offset\": \"<number>\"\n        },\n        {\n          \"length\": \"<number>\",\n          \"offset\": \"<number>\"\n        }\n      ],\n      \"structured_formatting\": {\n        \"main_text\": \"<string>\",\n        \"main_text_matched_substrings\": [\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          },\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          }\n        ],\n        \"secondary_text\": \"<string>\",\n        \"secondary_text_matched_substrings\": [\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          },\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          }\n        ]\n      },\n      \"terms\": [\n        {\n          \"value\": \"<string>\",\n          \"offset\": \"<number>\"\n        },\n        {\n          \"value\": \"<string>\",\n          \"offset\": \"<number>\"\n        }\n      ],\n      \"place_id\": \"<string>\",\n      \"reference\": \"<string>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"distance_meters\": \"<integer>\"\n    }\n  ],\n  \"status\": \"OVER_QUERY_LIMIT\",\n  \"error_message\": \"<string>\",\n  \"info_messages\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
														}
													]
												}
											],
											"id": "92e9f010-e698-449d-85ad-1f31e7353bcc"
										}
									],
									"id": "0875a907-750d-4fbf-ab60-54ede4de1d95"
								},
								{
									"name": "autocomplete",
									"item": [
										{
											"name": "json",
											"item": [
												{
													"name": "The Place Autocomplete service is a web service that returns place predictions in response to an HTTP request. The request specifies a textual search string and optional geographic bounds. The service can be used to provide autocomplete functionality for ",
													"id": "a420f8c3-cf69-4bc4-9552-8e102e8f4cda",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/place/autocomplete/json?input=<string>&sessiontoken=<string>&components=<string>&strictbounds=<boolean>&offset=<number>&origin=<string>&location=<string>&locationbias=<string>&locationrestriction=<string>&radius=<number>&types=<string>&language=en&region=en",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"place",
																"autocomplete",
																"json"
															],
															"query": [
																{
																	"description": "(Required) The text string on which to search. The Place Autocomplete service will return candidate matches based on this string and order results based on their perceived relevance.\n",
																	"key": "input",
																	"value": "<string>"
																},
																{
																	"description": "A random string which identifies an autocomplete [session](https://developers.google.com/maps/documentation/places/web-service/details#session_tokens) for billing purposes.\n\nThe session begins when the user starts typing a query, and concludes when they select a place and a call to Place Details is made. Each session can have multiple queries, followed by one place selection. The API key(s) used for each request within a session must belong to the same Google Cloud Console project. Once a session has concluded, the token is no longer valid; your app must generate a fresh token for each session. If the `sessiontoken` parameter is omitted, or if you reuse a session token, the session is charged as if no session token was provided (each request is billed separately).\n\nWe recommend the following guidelines:\n\n- Use session tokens for all autocomplete sessions.\n- Generate a fresh token for each session. Using a version 4 UUID is recommended.\n- Ensure that the API key(s) used for all Place Autocomplete and Place Details requests within a session belong to the same Cloud Console project.\n- Be sure to pass a unique session token for each new session. Using the same token for more than one session will result in each request being billed individually.\n",
																	"key": "sessiontoken",
																	"value": "<string>"
																},
																{
																	"description": "A grouping of places to which you would like to restrict your results. Currently, you can use components to filter by up to 5 countries. Countries must be passed as a two character, ISO 3166-1 Alpha-2 compatible country code. For example: `components=country:fr` would restrict your results to places within France. Multiple countries must be passed as multiple `country:XX` filters, with the pipe character `|` as a separator. For example: `components=country:us|country:pr|country:vi|country:gu|country:mp` would restrict your results to places within the United States and its unincorporated organized territories.\n<div class=\"note\"><strong>Note:</strong> If you receive unexpected results with a country code, verify that you are using a code which includes the countries, dependent territories, and special areas of geographical interest you intend.  You can find code information at <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\" target=\"blank\" class=\"external\">Wikipedia: List of ISO 3166 country codes</a> or the <a href=\"https://www.iso.org/obp/ui/#search\" target=\"blank\" class=\"external\">ISO Online Browsing Platform</a>.</div>\n",
																	"key": "components",
																	"value": "<string>"
																},
																{
																	"description": "Returns only those places that are strictly within the region defined by `location` and `radius`. This is a restriction, rather than a bias, meaning that results outside this region will not be returned even if they match the user input.\n",
																	"key": "strictbounds",
																	"value": "<boolean>"
																},
																{
																	"description": "The position, in the input term, of the last character that the service uses to match predictions. For example, if the input is `Google` and the offset is 3, the service will match on `Goo`. The string determined by the offset is matched against the first word in the input term only. For example, if the input term is `Google abc` and the offset is 3, the service will attempt to match against `Goo abc`. If no offset is supplied, the service will use the whole term. The offset should generally be set to the position of the text caret.\n",
																	"key": "offset",
																	"value": "<number>"
																},
																{
																	"description": "The origin point from which to calculate straight-line distance to the destination (returned as `distance_meters`). If this value is omitted, straight-line distance will not be returned. Must be specified as `latitude,longitude`.\n",
																	"key": "origin",
																	"value": "<string>"
																},
																{
																	"description": "The point around which to retrieve place information. This must be specified as `latitude,longitude`. The `radius` parameter must also be provided when specifying a location. If `radius` is not provided, the `location` parameter is ignored.\n\n<div class=\"note\">When using the Text Search API, the `location` parameter may be overriden if the `query` contains an explicit location such as `Market in Barcelona`.</div>\n",
																	"key": "location",
																	"value": "<string>"
																},
																{
																	"description": "Prefer results in a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle. If this parameter is not specified, the API uses IP address biasing by default.\n- IP bias: Instructs the API to use IP address biasing. Pass the string `ipbias` (this option has no additional parameters).\n- Circular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: `circle:radius@lat,lng`.\n- Rectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:`rectangle:south,west|north,east`. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.\n",
																	"key": "locationbias",
																	"value": "<string>"
																},
																{
																	"description": "Restrict results to a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle.\n- Circular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: `circle:radius@lat,lng`.\n- Rectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:`rectangle:south,west|north,east`. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.\n",
																	"key": "locationrestriction",
																	"value": "<string>"
																},
																{
																	"description": "(Required) Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.\n\nThe radius will automatically be clamped to a maximum value depending on the type of search and other parameters.\n\n* Autocomplete: 50,000 meters\n* Nearby Search: \n  * with `keyword` or `name`: 50,000 meters\n  * without `keyword` or `name`\n    * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.\n    * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.\n* Query Autocomplete: 50,000 meters\n* Text Search: 50,000 meters\n",
																	"key": "radius",
																	"value": "<number>"
																},
																{
																	"description": "You can restrict results from a Place Autocomplete request to be of a certain type by passing the `types` parameter. This parameter specifies a type or a type collection, as listed in [Place Types](/maps/documentation/places/web-service/supported_types). If nothing is specified, all types are returned.\n\nFor the value of the `types` parameter you can specify either:\n* Up to five values from [Table 1](/maps/documentation/places/web-service/supported_types#table1) or [Table 2](/maps/documentation/places/web-service/supported_types#table2). For multiple values, separate each value with a `|` (vertical bar). For example:\n\n  `types=book_store|cafe`\n\n* Any supported filter in [Table 3](/maps/documentation/places/web-service/supported_types#table3). You can safely mix the `geocode` and `establishment` types. You cannot mix type collections (`address`, `(cities)` or `(regions)`) with any other type, or an error occurs.\n\nThe request will be rejected with an `INVALID_REQUEST` error if:\n\n* More than five types are specified.\n* Any unrecognized types are present.\n* Any types from in [Table 1](/maps/documentation/places/web-service/supported_types#table1) or [Table 2](/maps/documentation/places/web-service/supported_types#table2) are mixed with any of the filters in [Table 3](/maps/documentation/places/web-service/supported_types#table3).\n",
																	"key": "types",
																	"value": "<string>"
																},
																{
																	"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																	"key": "language",
																	"value": "en"
																},
																{
																	"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
																	"key": "region",
																	"value": "en"
																}
															]
														},
														"description": "The Place Autocomplete service is a web service that returns place predictions in response to an HTTP request. The request specifies a textual search string and optional geographic bounds. The service can be used to provide autocomplete functionality for text-based geographic searches, by returning places such as businesses, addresses and points of interest as a user types.\n<div class=\"note\">Note: You can use Place Autocomplete even without a map. If you do show a map, it must be a Google map. When you display predictions from the Place Autocomplete service without a map, you must include the ['Powered by Google'](https://developers.google.com/maps/documentation/places/web-service/policies#logo_requirementshttps://developers.google.com/maps/documentation/places/web-service/policies#logo_requirements) logo.</div>\n\nThe Place Autocomplete service can match on full words and substrings, resolving place names, addresses, and plus codes. Applications can therefore send queries as the user types, to provide on-the-fly place predictions.\n\nThe returned predictions are designed to be presented to the user to aid them in selecting the desired place. You can send a [Place Details](https://developers.google.com/maps/documentation/places/web-service/details#PlaceDetailsRequests) request for more information about any of the places which are returned.\n"
													},
													"response": [
														{
															"id": "b24e5e96-333e-4c2d-bc57-ed8fb4023e59",
															"name": "200 OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "https://maps.googleapis.com/maps/api/place/autocomplete/json?input=<string>&sessiontoken=<string>&components=<string>&strictbounds=<boolean>&offset=<number>&origin=<string>&location=<string>&locationbias=<string>&locationrestriction=<string>&radius=<number>&types=<string>&language=en&region=en&key=<API Key>",
																	"protocol": "https",
																	"host": [
																		"maps",
																		"googleapis",
																		"com"
																	],
																	"path": [
																		"maps",
																		"api",
																		"place",
																		"autocomplete",
																		"json"
																	],
																	"query": [
																		{
																			"description": "(Required) The text string on which to search. The Place Autocomplete service will return candidate matches based on this string and order results based on their perceived relevance.\n",
																			"key": "input",
																			"value": "<string>"
																		},
																		{
																			"description": "A random string which identifies an autocomplete [session](https://developers.google.com/maps/documentation/places/web-service/details#session_tokens) for billing purposes.\n\nThe session begins when the user starts typing a query, and concludes when they select a place and a call to Place Details is made. Each session can have multiple queries, followed by one place selection. The API key(s) used for each request within a session must belong to the same Google Cloud Console project. Once a session has concluded, the token is no longer valid; your app must generate a fresh token for each session. If the `sessiontoken` parameter is omitted, or if you reuse a session token, the session is charged as if no session token was provided (each request is billed separately).\n\nWe recommend the following guidelines:\n\n- Use session tokens for all autocomplete sessions.\n- Generate a fresh token for each session. Using a version 4 UUID is recommended.\n- Ensure that the API key(s) used for all Place Autocomplete and Place Details requests within a session belong to the same Cloud Console project.\n- Be sure to pass a unique session token for each new session. Using the same token for more than one session will result in each request being billed individually.\n",
																			"key": "sessiontoken",
																			"value": "<string>"
																		},
																		{
																			"description": "A grouping of places to which you would like to restrict your results. Currently, you can use components to filter by up to 5 countries. Countries must be passed as a two character, ISO 3166-1 Alpha-2 compatible country code. For example: `components=country:fr` would restrict your results to places within France. Multiple countries must be passed as multiple `country:XX` filters, with the pipe character `|` as a separator. For example: `components=country:us|country:pr|country:vi|country:gu|country:mp` would restrict your results to places within the United States and its unincorporated organized territories.\n<div class=\"note\"><strong>Note:</strong> If you receive unexpected results with a country code, verify that you are using a code which includes the countries, dependent territories, and special areas of geographical interest you intend.  You can find code information at <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\" target=\"blank\" class=\"external\">Wikipedia: List of ISO 3166 country codes</a> or the <a href=\"https://www.iso.org/obp/ui/#search\" target=\"blank\" class=\"external\">ISO Online Browsing Platform</a>.</div>\n",
																			"key": "components",
																			"value": "<string>"
																		},
																		{
																			"description": "Returns only those places that are strictly within the region defined by `location` and `radius`. This is a restriction, rather than a bias, meaning that results outside this region will not be returned even if they match the user input.\n",
																			"key": "strictbounds",
																			"value": "<boolean>"
																		},
																		{
																			"description": "The position, in the input term, of the last character that the service uses to match predictions. For example, if the input is `Google` and the offset is 3, the service will match on `Goo`. The string determined by the offset is matched against the first word in the input term only. For example, if the input term is `Google abc` and the offset is 3, the service will attempt to match against `Goo abc`. If no offset is supplied, the service will use the whole term. The offset should generally be set to the position of the text caret.\n",
																			"key": "offset",
																			"value": "<number>"
																		},
																		{
																			"description": "The origin point from which to calculate straight-line distance to the destination (returned as `distance_meters`). If this value is omitted, straight-line distance will not be returned. Must be specified as `latitude,longitude`.\n",
																			"key": "origin",
																			"value": "<string>"
																		},
																		{
																			"description": "The point around which to retrieve place information. This must be specified as `latitude,longitude`. The `radius` parameter must also be provided when specifying a location. If `radius` is not provided, the `location` parameter is ignored.\n\n<div class=\"note\">When using the Text Search API, the `location` parameter may be overriden if the `query` contains an explicit location such as `Market in Barcelona`.</div>\n",
																			"key": "location",
																			"value": "<string>"
																		},
																		{
																			"description": "Prefer results in a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle. If this parameter is not specified, the API uses IP address biasing by default.\n- IP bias: Instructs the API to use IP address biasing. Pass the string `ipbias` (this option has no additional parameters).\n- Circular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: `circle:radius@lat,lng`.\n- Rectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:`rectangle:south,west|north,east`. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.\n",
																			"key": "locationbias",
																			"value": "<string>"
																		},
																		{
																			"description": "Restrict results to a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle.\n- Circular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: `circle:radius@lat,lng`.\n- Rectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:`rectangle:south,west|north,east`. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.\n",
																			"key": "locationrestriction",
																			"value": "<string>"
																		},
																		{
																			"description": "(Required) Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.\n\nThe radius will automatically be clamped to a maximum value depending on the type of search and other parameters.\n\n* Autocomplete: 50,000 meters\n* Nearby Search: \n  * with `keyword` or `name`: 50,000 meters\n  * without `keyword` or `name`\n    * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.\n    * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.\n* Query Autocomplete: 50,000 meters\n* Text Search: 50,000 meters\n",
																			"key": "radius",
																			"value": "<number>"
																		},
																		{
																			"description": "You can restrict results from a Place Autocomplete request to be of a certain type by passing the `types` parameter. This parameter specifies a type or a type collection, as listed in [Place Types](/maps/documentation/places/web-service/supported_types). If nothing is specified, all types are returned.\n\nFor the value of the `types` parameter you can specify either:\n* Up to five values from [Table 1](/maps/documentation/places/web-service/supported_types#table1) or [Table 2](/maps/documentation/places/web-service/supported_types#table2). For multiple values, separate each value with a `|` (vertical bar). For example:\n\n  `types=book_store|cafe`\n\n* Any supported filter in [Table 3](/maps/documentation/places/web-service/supported_types#table3). You can safely mix the `geocode` and `establishment` types. You cannot mix type collections (`address`, `(cities)` or `(regions)`) with any other type, or an error occurs.\n\nThe request will be rejected with an `INVALID_REQUEST` error if:\n\n* More than five types are specified.\n* Any unrecognized types are present.\n* Any types from in [Table 1](/maps/documentation/places/web-service/supported_types#table1) or [Table 2](/maps/documentation/places/web-service/supported_types#table2) are mixed with any of the filters in [Table 3](/maps/documentation/places/web-service/supported_types#table3).\n",
																			"key": "types",
																			"value": "<string>"
																		},
																		{
																			"description": "The language in which to return results.\n\n* See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.\n* If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.\n* The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n* If a name is not available in the preferred language, the API uses the closest match.\n* The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian.",
																			"key": "language",
																			"value": "en"
																		},
																		{
																			"description": "The region code, specified as a [ccTLD (\"top-level domain\")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").",
																			"key": "region",
																			"value": "en"
																		},
																		{
																			"description": "Added as a part of security scheme: apikey",
																			"key": "key",
																			"value": "<API Key>"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"predictions\": [\n    {\n      \"description\": \"<string>\",\n      \"matched_substrings\": [\n        {\n          \"length\": \"<number>\",\n          \"offset\": \"<number>\"\n        },\n        {\n          \"length\": \"<number>\",\n          \"offset\": \"<number>\"\n        }\n      ],\n      \"structured_formatting\": {\n        \"main_text\": \"<string>\",\n        \"main_text_matched_substrings\": [\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          },\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          }\n        ],\n        \"secondary_text\": \"<string>\",\n        \"secondary_text_matched_substrings\": [\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          },\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          }\n        ]\n      },\n      \"terms\": [\n        {\n          \"value\": \"<string>\",\n          \"offset\": \"<number>\"\n        },\n        {\n          \"value\": \"<string>\",\n          \"offset\": \"<number>\"\n        }\n      ],\n      \"place_id\": \"<string>\",\n      \"reference\": \"<string>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"distance_meters\": \"<integer>\"\n    },\n    {\n      \"description\": \"<string>\",\n      \"matched_substrings\": [\n        {\n          \"length\": \"<number>\",\n          \"offset\": \"<number>\"\n        },\n        {\n          \"length\": \"<number>\",\n          \"offset\": \"<number>\"\n        }\n      ],\n      \"structured_formatting\": {\n        \"main_text\": \"<string>\",\n        \"main_text_matched_substrings\": [\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          },\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          }\n        ],\n        \"secondary_text\": \"<string>\",\n        \"secondary_text_matched_substrings\": [\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          },\n          {\n            \"length\": \"<number>\",\n            \"offset\": \"<number>\"\n          }\n        ]\n      },\n      \"terms\": [\n        {\n          \"value\": \"<string>\",\n          \"offset\": \"<number>\"\n        },\n        {\n          \"value\": \"<string>\",\n          \"offset\": \"<number>\"\n        }\n      ],\n      \"place_id\": \"<string>\",\n      \"reference\": \"<string>\",\n      \"types\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"distance_meters\": \"<integer>\"\n    }\n  ],\n  \"status\": \"REQUEST_DENIED\",\n  \"error_message\": \"<string>\",\n  \"info_messages\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
														}
													]
												}
											],
											"id": "4e88666f-d216-4cd0-8d3d-ae862c73cc33"
										}
									],
									"id": "0d914aed-fb3a-4e3f-b058-509903a3bd53"
								}
							],
							"id": "910d1e2e-b8bd-4c67-aadd-c6eac5a5a563"
						},
						{
							"name": "streetview",
							"item": [
								{
									"name": "metadata",
									"item": [
										{
											"name": "The Street View Static API metadata requests provide data about Street View panoramas. Using the metadata, you can find out if a Street View image is available at a given location, as well as getting programmatic access to the latitude and longitude, the ",
											"id": "3a72aa43-ca09-4589-b54c-d11e345b7df4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://maps.googleapis.com/maps/api/streetview/metadata?heading=<number>&location=<string>&pano=<string>&pitch=<number>&radius=<number>&return_error_code=<boolean>&signature=<string>&size=<string>&source=default",
													"protocol": "https",
													"host": [
														"maps",
														"googleapis",
														"com"
													],
													"path": [
														"maps",
														"api",
														"streetview",
														"metadata"
													],
													"query": [
														{
															"description": "Indicates the compass heading of the camera. Accepted values are from 0 to 360 (both values indicating North, with 90 indicating East, and 180 South). If no heading is specified, a value will be calculated that directs the camera towards the specified location, from the point at which the closest photograph was taken.\n",
															"key": "heading",
															"value": "<number>"
														},
														{
															"description": "The point around which to retrieve place information. The Street View Static API will snap to the panorama photographed closest to this location. When an address text string is provided, the API may use a different camera location to better display the specified location. When a lat/lng is provided, the API searches a 50 meter radius for a photograph closest to this location. Because Street View imagery is periodically refreshed, and photographs may be taken from slightly different positions each time, it's possible that your `location` may snap to a different panorama when imagery is updated.\n",
															"key": "location",
															"value": "<string>"
														},
														{
															"description": "A specific panorama ID. These are generally stable, though panoramas may change ID over time as imagery is refreshed.\n",
															"key": "pano",
															"value": "<string>"
														},
														{
															"description": "Specifies the up or down angle of the camera relative to the Street View vehicle. This is often, but not always, flat horizontal. Positive values angle the camera up (with 90 degrees indicating straight up); negative values angle the camera down (with -90 indicating straight down). Default is 0.\n",
															"key": "pitch",
															"value": "<number>"
														},
														{
															"description": "Sets a radius, specified in meters, in which to search for a panorama, centered on the given latitude and longitude. Valid values are non-negative integers. Default is 50 meters.\n",
															"key": "radius",
															"value": "<number>"
														},
														{
															"description": "Indicates whether the API should return a non `200 Ok` HTTP status when no image is found (`404 NOT FOUND`), or in response to an invalid request (400 BAD REQUEST). Valid values are `true` and `false`. If set to `true`, an error message is returned in place of the generic gray image. This eliminates the need to make a separate call to check for image availability.\n",
															"key": "return_error_code",
															"value": "<boolean>"
														},
														{
															"description": "A digital signature used to verify that any site generating requests using your API key is authorized to do so. Requests that do not include a digital signature might fail. For more information, see [Get a Key and Signature](https://developers.google.com/maps/documentation/streetview/get-api-key).\n",
															"key": "signature",
															"value": "<string>"
														},
														{
															"description": "Specifies the output size of the image in pixels. Size is specified as `{width}x{height}` - for example, `size=600x400` returns an image 600 pixels wide, and 400 high.\n",
															"key": "size",
															"value": "<string>"
														},
														{
															"description": "Limits Street View searches to selected sources. Valid values are:\n* `default` uses the default sources for Street View; searches are not limited to specific sources.\n* `outdoor` limits searches to outdoor collections. Indoor collections are not included in search results. Note that outdoor panoramas may not exist for the specified location. Also note that the search only returns panoramas where it's possible to determine whether they're indoors or outdoors. For example, PhotoSpheres are not returned because it's unknown whether they are indoors or outdoors.\n",
															"key": "source",
															"value": "default"
														}
													]
												},
												"description": "The Street View Static API metadata requests provide data about Street View panoramas. Using the metadata, you can find out if a Street View image is available at a given location, as well as getting programmatic access to the latitude and longitude, the panorama ID, the date the photo was taken, and the copyright information for the image. Accessing this metadata allows you to customize error behavior in your application.\n"
											},
											"response": [
												{
													"id": "d51a3122-f107-4c9f-8d58-d7af4c385b4e",
													"name": "200 OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://maps.googleapis.com/maps/api/streetview/metadata?heading=<number>&location=<string>&pano=<string>&pitch=<number>&radius=<number>&return_error_code=<boolean>&signature=<string>&size=<string>&source=default&key=<API Key>",
															"protocol": "https",
															"host": [
																"maps",
																"googleapis",
																"com"
															],
															"path": [
																"maps",
																"api",
																"streetview",
																"metadata"
															],
															"query": [
																{
																	"description": "Indicates the compass heading of the camera. Accepted values are from 0 to 360 (both values indicating North, with 90 indicating East, and 180 South). If no heading is specified, a value will be calculated that directs the camera towards the specified location, from the point at which the closest photograph was taken.\n",
																	"key": "heading",
																	"value": "<number>"
																},
																{
																	"description": "The point around which to retrieve place information. The Street View Static API will snap to the panorama photographed closest to this location. When an address text string is provided, the API may use a different camera location to better display the specified location. When a lat/lng is provided, the API searches a 50 meter radius for a photograph closest to this location. Because Street View imagery is periodically refreshed, and photographs may be taken from slightly different positions each time, it's possible that your `location` may snap to a different panorama when imagery is updated.\n",
																	"key": "location",
																	"value": "<string>"
																},
																{
																	"description": "A specific panorama ID. These are generally stable, though panoramas may change ID over time as imagery is refreshed.\n",
																	"key": "pano",
																	"value": "<string>"
																},
																{
																	"description": "Specifies the up or down angle of the camera relative to the Street View vehicle. This is often, but not always, flat horizontal. Positive values angle the camera up (with 90 degrees indicating straight up); negative values angle the camera down (with -90 indicating straight down). Default is 0.\n",
																	"key": "pitch",
																	"value": "<number>"
																},
																{
																	"description": "Sets a radius, specified in meters, in which to search for a panorama, centered on the given latitude and longitude. Valid values are non-negative integers. Default is 50 meters.\n",
																	"key": "radius",
																	"value": "<number>"
																},
																{
																	"description": "Indicates whether the API should return a non `200 Ok` HTTP status when no image is found (`404 NOT FOUND`), or in response to an invalid request (400 BAD REQUEST). Valid values are `true` and `false`. If set to `true`, an error message is returned in place of the generic gray image. This eliminates the need to make a separate call to check for image availability.\n",
																	"key": "return_error_code",
																	"value": "<boolean>"
																},
																{
																	"description": "A digital signature used to verify that any site generating requests using your API key is authorized to do so. Requests that do not include a digital signature might fail. For more information, see [Get a Key and Signature](https://developers.google.com/maps/documentation/streetview/get-api-key).\n",
																	"key": "signature",
																	"value": "<string>"
																},
																{
																	"description": "Specifies the output size of the image in pixels. Size is specified as `{width}x{height}` - for example, `size=600x400` returns an image 600 pixels wide, and 400 high.\n",
																	"key": "size",
																	"value": "<string>"
																},
																{
																	"description": "Limits Street View searches to selected sources. Valid values are:\n* `default` uses the default sources for Street View; searches are not limited to specific sources.\n* `outdoor` limits searches to outdoor collections. Indoor collections are not included in search results. Note that outdoor panoramas may not exist for the specified location. Also note that the search only returns panoramas where it's possible to determine whether they're indoors or outdoors. For example, PhotoSpheres are not returned because it's unknown whether they are indoors or outdoors.\n",
																	"key": "source",
																	"value": "default"
																},
																{
																	"description": "Added as a part of security scheme: apikey",
																	"key": "key",
																	"value": "<API Key>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"OVER_QUERY_LIMIT\",\n  \"copyright\": \"<string>\",\n  \"date\": \"<string>\",\n  \"location\": {\n    \"lat\": \"<number>\",\n    \"lng\": \"<number>\"\n  },\n  \"pano_id\": \"<string>\"\n}"
												}
											]
										}
									],
									"id": "ecde077a-37fd-4eef-bf8f-63c29640218c"
								},
								{
									"name": "The Street View Static API lets you embed a static (non-interactive) Street View panorama or thumbnail into your web page, without the use of JavaScript. The viewport is defined with URL parameters sent through a standard HTTP request, and is returned as ",
									"id": "3829235e-3267-45ef-8cad-24d496848a7b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "image/*"
											}
										],
										"url": {
											"raw": "https://maps.googleapis.com/maps/api/streetview?fov=<number>&heading=<number>&location=<string>&pano=<string>&pitch=<number>&radius=<number>&return_error_code=<boolean>&signature=<string>&size=<string>&source=default",
											"protocol": "https",
											"host": [
												"maps",
												"googleapis",
												"com"
											],
											"path": [
												"maps",
												"api",
												"streetview"
											],
											"query": [
												{
													"description": "Determines the horizontal field of view of the image. The field of view is expressed in degrees, with a maximum allowed value of 120. When dealing with a fixed-size viewport, as with a Street View image of a set size, field of view in essence represents zoom, with smaller numbers indicating a higher level of zoom. Default is 90.\n",
													"key": "fov",
													"value": "<number>"
												},
												{
													"description": "Indicates the compass heading of the camera. Accepted values are from 0 to 360 (both values indicating North, with 90 indicating East, and 180 South). If no heading is specified, a value will be calculated that directs the camera towards the specified location, from the point at which the closest photograph was taken.\n",
													"key": "heading",
													"value": "<number>"
												},
												{
													"description": "The point around which to retrieve place information. The Street View Static API will snap to the panorama photographed closest to this location. When an address text string is provided, the API may use a different camera location to better display the specified location. When a lat/lng is provided, the API searches a 50 meter radius for a photograph closest to this location. Because Street View imagery is periodically refreshed, and photographs may be taken from slightly different positions each time, it's possible that your `location` may snap to a different panorama when imagery is updated.\n",
													"key": "location",
													"value": "<string>"
												},
												{
													"description": "A specific panorama ID. These are generally stable, though panoramas may change ID over time as imagery is refreshed.\n",
													"key": "pano",
													"value": "<string>"
												},
												{
													"description": "Specifies the up or down angle of the camera relative to the Street View vehicle. This is often, but not always, flat horizontal. Positive values angle the camera up (with 90 degrees indicating straight up); negative values angle the camera down (with -90 indicating straight down). Default is 0.\n",
													"key": "pitch",
													"value": "<number>"
												},
												{
													"description": "Sets a radius, specified in meters, in which to search for a panorama, centered on the given latitude and longitude. Valid values are non-negative integers. Default is 50 meters.\n",
													"key": "radius",
													"value": "<number>"
												},
												{
													"description": "Indicates whether the API should return a non `200 Ok` HTTP status when no image is found (`404 NOT FOUND`), or in response to an invalid request (400 BAD REQUEST). Valid values are `true` and `false`. If set to `true`, an error message is returned in place of the generic gray image. This eliminates the need to make a separate call to check for image availability.\n",
													"key": "return_error_code",
													"value": "<boolean>"
												},
												{
													"description": "A digital signature used to verify that any site generating requests using your API key is authorized to do so. Requests that do not include a digital signature might fail. For more information, see [Get a Key and Signature](https://developers.google.com/maps/documentation/streetview/get-api-key).\n",
													"key": "signature",
													"value": "<string>"
												},
												{
													"description": "(Required) Specifies the output size of the image in pixels. Must not exceed 640 pixels wide or high, anything over will default to 640 pixels. Size is specified as `{width}x{height}` - for example, `size=600x400` returns an image 600 pixels wide, and 400 high.\n",
													"key": "size",
													"value": "<string>"
												},
												{
													"description": "Limits Street View searches to selected sources. Valid values are:\n* `default` uses the default sources for Street View; searches are not limited to specific sources.\n* `outdoor` limits searches to outdoor collections. Indoor collections are not included in search results. Note that outdoor panoramas may not exist for the specified location. Also note that the search only returns panoramas where it's possible to determine whether they're indoors or outdoors. For example, PhotoSpheres are not returned because it's unknown whether they are indoors or outdoors.\n",
													"key": "source",
													"value": "default"
												}
											]
										},
										"description": "The Street View Static API lets you embed a static (non-interactive) Street View panorama or thumbnail into your web page, without the use of JavaScript. The viewport is defined with URL parameters sent through a standard HTTP request, and is returned as a static image.\n"
									},
									"response": [
										{
											"id": "cafdebc9-1056-4bdd-bcd9-46a6e02e081b",
											"name": "200 OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "image/*"
													}
												],
												"url": {
													"raw": "https://maps.googleapis.com/maps/api/streetview?fov=<number>&heading=<number>&location=<string>&pano=<string>&pitch=<number>&radius=<number>&return_error_code=<boolean>&signature=<string>&size=<string>&source=default&key=<API Key>",
													"protocol": "https",
													"host": [
														"maps",
														"googleapis",
														"com"
													],
													"path": [
														"maps",
														"api",
														"streetview"
													],
													"query": [
														{
															"description": "Determines the horizontal field of view of the image. The field of view is expressed in degrees, with a maximum allowed value of 120. When dealing with a fixed-size viewport, as with a Street View image of a set size, field of view in essence represents zoom, with smaller numbers indicating a higher level of zoom. Default is 90.\n",
															"key": "fov",
															"value": "<number>"
														},
														{
															"description": "Indicates the compass heading of the camera. Accepted values are from 0 to 360 (both values indicating North, with 90 indicating East, and 180 South). If no heading is specified, a value will be calculated that directs the camera towards the specified location, from the point at which the closest photograph was taken.\n",
															"key": "heading",
															"value": "<number>"
														},
														{
															"description": "The point around which to retrieve place information. The Street View Static API will snap to the panorama photographed closest to this location. When an address text string is provided, the API may use a different camera location to better display the specified location. When a lat/lng is provided, the API searches a 50 meter radius for a photograph closest to this location. Because Street View imagery is periodically refreshed, and photographs may be taken from slightly different positions each time, it's possible that your `location` may snap to a different panorama when imagery is updated.\n",
															"key": "location",
															"value": "<string>"
														},
														{
															"description": "A specific panorama ID. These are generally stable, though panoramas may change ID over time as imagery is refreshed.\n",
															"key": "pano",
															"value": "<string>"
														},
														{
															"description": "Specifies the up or down angle of the camera relative to the Street View vehicle. This is often, but not always, flat horizontal. Positive values angle the camera up (with 90 degrees indicating straight up); negative values angle the camera down (with -90 indicating straight down). Default is 0.\n",
															"key": "pitch",
															"value": "<number>"
														},
														{
															"description": "Sets a radius, specified in meters, in which to search for a panorama, centered on the given latitude and longitude. Valid values are non-negative integers. Default is 50 meters.\n",
															"key": "radius",
															"value": "<number>"
														},
														{
															"description": "Indicates whether the API should return a non `200 Ok` HTTP status when no image is found (`404 NOT FOUND`), or in response to an invalid request (400 BAD REQUEST). Valid values are `true` and `false`. If set to `true`, an error message is returned in place of the generic gray image. This eliminates the need to make a separate call to check for image availability.\n",
															"key": "return_error_code",
															"value": "<boolean>"
														},
														{
															"description": "A digital signature used to verify that any site generating requests using your API key is authorized to do so. Requests that do not include a digital signature might fail. For more information, see [Get a Key and Signature](https://developers.google.com/maps/documentation/streetview/get-api-key).\n",
															"key": "signature",
															"value": "<string>"
														},
														{
															"description": "(Required) Specifies the output size of the image in pixels. Must not exceed 640 pixels wide or high, anything over will default to 640 pixels. Size is specified as `{width}x{height}` - for example, `size=600x400` returns an image 600 pixels wide, and 400 high.\n",
															"key": "size",
															"value": "<string>"
														},
														{
															"description": "Limits Street View searches to selected sources. Valid values are:\n* `default` uses the default sources for Street View; searches are not limited to specific sources.\n* `outdoor` limits searches to outdoor collections. Indoor collections are not included in search results. Note that outdoor panoramas may not exist for the specified location. Also note that the search only returns panoramas where it's possible to determine whether they're indoors or outdoors. For example, PhotoSpheres are not returned because it's unknown whether they are indoors or outdoors.\n",
															"key": "source",
															"value": "default"
														},
														{
															"description": "Added as a part of security scheme: apikey",
															"key": "key",
															"value": "<API Key>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "image/*"
												}
											],
											"cookie": [],
											"body": "<string>"
										}
									]
								}
							],
							"id": "2908a6ef-4b2c-478f-8826-f03fa3e555ef"
						}
					],
					"id": "c9c8e33e-b7a2-454d-b8c9-d7d83dc9869e"
				}
			],
			"id": "5f5ad856-966d-42e3-95c7-ba1774568c5f"
		},
		{
			"name": "v1",
			"item": [
				{
					"name": "snaptoroads",
					"item": [
						{
							"name": "This service returns the best-fit road geometry for a given set of GPS coordinates. This service takes up to 100 GPS points collected along a route, and returns a similar set of data with the points snapped to the most likely roads the vehicle was traveli",
							"id": "1d98c3dc-f36b-4d31-b6b1-41787c96557a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://roads.googleapis.com/v1/snaptoroads?path=<string>|<string>&interpolate=<boolean>",
									"protocol": "https",
									"host": [
										"roads",
										"googleapis",
										"com"
									],
									"path": [
										"v1",
										"snaptoroads"
									],
									"query": [
										{
											"description": "(Required) The path to be snapped. The path parameter accepts a list of latitude/longitude pairs. Latitude and longitude values should be separated by commas. Coordinates should be separated by the pipe character: \"|\". For example: `path=60.170880,24.942795|60.170879,24.942796|60.170877,24.942796`.\n<div class=\"note\">Note: The snapping algorithm works best for points that are not too far apart. If you observe odd snapping behavior, try creating paths that have points closer together. To ensure the best snap-to-road quality, you should aim to provide paths on which consecutive pairs of points are within 300m of each other. This will also help in handling any isolated, long jumps between consecutive points caused by GPS signal loss, or noise.</div>\n",
											"key": "path",
											"value": "<string>|<string>"
										},
										{
											"description": "Whether to interpolate a path to include all points forming the full road-geometry. When true, additional interpolated points will also be returned, resulting in a path that smoothly follows the geometry of the road, even around corners and through tunnels. Interpolated paths will most likely contain more points than the original path. Defaults to `false`.\n",
											"key": "interpolate",
											"value": "<boolean>"
										}
									]
								},
								"description": "This service returns the best-fit road geometry for a given set of GPS coordinates. This service takes up to 100 GPS points collected along a route, and returns a similar set of data with the points snapped to the most likely roads the vehicle was traveling along. Optionally, you can request that the points be interpolated, resulting in a path that smoothly follows the geometry of the road."
							},
							"response": [
								{
									"id": "435628e7-3554-4a99-bf36-5e062fdfc603",
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://roads.googleapis.com/v1/snaptoroads?path=<string>|<string>&interpolate=<boolean>&key=<API Key>",
											"protocol": "https",
											"host": [
												"roads",
												"googleapis",
												"com"
											],
											"path": [
												"v1",
												"snaptoroads"
											],
											"query": [
												{
													"description": "(Required) The path to be snapped. The path parameter accepts a list of latitude/longitude pairs. Latitude and longitude values should be separated by commas. Coordinates should be separated by the pipe character: \"|\". For example: `path=60.170880,24.942795|60.170879,24.942796|60.170877,24.942796`.\n<div class=\"note\">Note: The snapping algorithm works best for points that are not too far apart. If you observe odd snapping behavior, try creating paths that have points closer together. To ensure the best snap-to-road quality, you should aim to provide paths on which consecutive pairs of points are within 300m of each other. This will also help in handling any isolated, long jumps between consecutive points caused by GPS signal loss, or noise.</div>\n",
													"key": "path",
													"value": "<string>|<string>"
												},
												{
													"description": "Whether to interpolate a path to include all points forming the full road-geometry. When true, additional interpolated points will also be returned, resulting in a path that smoothly follows the geometry of the road, even around corners and through tunnels. Interpolated paths will most likely contain more points than the original path. Defaults to `false`.\n",
													"key": "interpolate",
													"value": "<boolean>"
												},
												{
													"description": "Added as a part of security scheme: apikey",
													"key": "key",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"snappedPoints\": [\n    {\n      \"location\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\"\n      },\n      \"placeId\": \"<string>\",\n      \"originalIndex\": \"<number>\"\n    },\n    {\n      \"location\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\"\n      },\n      \"placeId\": \"<string>\",\n      \"originalIndex\": \"<number>\"\n    }\n  ],\n  \"warningMessage\": \"<string>\"\n}"
								}
							]
						}
					],
					"id": "85372761-9038-4f30-944c-7e882c7204b7"
				},
				{
					"name": "nearestRoads",
					"item": [
						{
							"name": "This service returns individual road segments for a given set of GPS coordinates. This services takes up to 100 GPS points and returns the closest road segments for each point. The points passed do not need to be part of a continuous path.",
							"id": "31d2a8e9-9c36-4543-8d29-64cf4be11deb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://roads.googleapis.com/v1/nearestRoads?points=<string>|<string>",
									"protocol": "https",
									"host": [
										"roads",
										"googleapis",
										"com"
									],
									"path": [
										"v1",
										"nearestRoads"
									],
									"query": [
										{
											"description": "(Required) The points to be snapped. The points parameter accepts a list of latitude/longitude pairs. Separate latitude and longitude values with commas. Separate coordinates with the pipe character: \"|\". For example: `points=60.170880,24.942795|60.170879,24.942796|60.170877,24.942796`.\n",
											"key": "points",
											"value": "<string>|<string>"
										}
									]
								},
								"description": "This service returns individual road segments for a given set of GPS coordinates. This services takes up to 100 GPS points and returns the closest road segments for each point. The points passed do not need to be part of a continuous path."
							},
							"response": [
								{
									"id": "91733421-e499-43e2-b2e6-ab9252fe52a7",
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://roads.googleapis.com/v1/nearestRoads?points=<string>|<string>&key=<API Key>",
											"protocol": "https",
											"host": [
												"roads",
												"googleapis",
												"com"
											],
											"path": [
												"v1",
												"nearestRoads"
											],
											"query": [
												{
													"description": "(Required) The points to be snapped. The points parameter accepts a list of latitude/longitude pairs. Separate latitude and longitude values with commas. Separate coordinates with the pipe character: \"|\". For example: `points=60.170880,24.942795|60.170879,24.942796|60.170877,24.942796`.\n",
													"key": "points",
													"value": "<string>|<string>"
												},
												{
													"description": "Added as a part of security scheme: apikey",
													"key": "key",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"snappedPoints\": [\n    {\n      \"location\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\"\n      },\n      \"placeId\": \"<string>\",\n      \"originalIndex\": \"<number>\"\n    },\n    {\n      \"location\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\"\n      },\n      \"placeId\": \"<string>\",\n      \"originalIndex\": \"<number>\"\n    }\n  ]\n}"
								},
								{
									"id": "8da201ce-9761-4a89-b436-0d42ca49f639",
									"name": "400 BAD REQUEST",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://roads.googleapis.com/v1/nearestRoads?points=<string>|<string>&key=<API Key>",
											"protocol": "https",
											"host": [
												"roads",
												"googleapis",
												"com"
											],
											"path": [
												"v1",
												"nearestRoads"
											],
											"query": [
												{
													"description": "(Required) The points to be snapped. The points parameter accepts a list of latitude/longitude pairs. Separate latitude and longitude values with commas. Separate coordinates with the pipe character: \"|\". For example: `points=60.170880,24.942795|60.170879,24.942796|60.170877,24.942796`.\n",
													"key": "points",
													"value": "<string>|<string>"
												},
												{
													"description": "Added as a part of security scheme: apikey",
													"key": "key",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": {\n    \"code\": \"<number>\",\n    \"message\": \"<string>\",\n    \"status\": \"<string>\"\n  }\n}"
								}
							]
						}
					],
					"id": "0ac86771-3793-4c95-81b8-aa9337136dd4"
				}
			],
			"id": "6a348a8a-6491-4f14-8dea-7603d8733bbc"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "query",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"id": "21363a83-3a50-43a4-9e9e-6f3e20502139",
			"key": "baseUrl",
			"value": "https://www.googleapis.com"
		}
	]
}